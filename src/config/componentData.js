module.exports = [{"name":"Autocomplete","description":"This component integrates the Input, Droplist and Label components.\r\nThe value of Input filters the list in Droplist.\r\nThe selected items of Droplist can be stacked into Labels.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"inputProps":{"type":{"name":"shape","value":{"id":{"name":"string","required":false},"type":{"name":"string","required":false},"name":{"name":"string","required":false},"label":{"name":"string","required":false},"placeholder":{"name":"string","required":false},"selectOnFocus":{"name":"bool","required":false},"clear":{"name":"bool","required":false},"iconName":{"name":"string","required":false},"theme":{"name":"string","required":false},"valueProp":{"name":"string","required":false},"className":{"name":"string","required":false}}},"required":false,"description":"Object with the props for the Input component. Check their descriptions in the Input docs.","defaultValue":{"value":"{}","computed":false}},"droplistProps":{"type":{"name":"shape","value":{"items":{"name":"array","required":false},"itemIdKey":{"name":"string","required":false},"itemTextKey":{"name":"string","required":false},"itemTextRightKey":{"name":"string","required":false},"groups":{"name":"bool","required":false},"groupIdKey":{"name":"string","required":false},"groupNameKey":{"name":"string","required":false},"groupItemsKey":{"name":"string","required":false},"className":{"name":"string","required":false},"filter":{"name":"bool","required":false}}},"required":false,"description":"Object with the props for the Droplist component. Check their descriptions in the Droplist docs.","defaultValue":{"value":"{}","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call on change (Input)."},"onFocus":{"type":{"name":"func"},"required":false,"description":"Function to call on focus (Input)."},"onBlur":{"type":{"name":"func"},"required":false,"description":"Function to call on blur (Input)."},"onClear":{"type":{"name":"func"},"required":false,"description":"Function to call on clear (Input)."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call on click (Droplist item)."},"onRef":{"type":{"name":"func"},"required":false,"description":""},"stackLabels":{"type":{"name":"bool"},"required":false,"description":"Set this property to stack the selected items of Droplist into Labels."},"limit":{"type":{"name":"number"},"required":false,"description":"Set the limit of stackable items into labels."},"limitPlaceholder":{"type":{"name":"string"},"required":false,"description":"Change the placeholder when the limit of labels has been reached."},"selectOnEnter":{"type":{"name":"bool"},"required":false,"description":"Automatically selects the first item of the Droplist when pressing the Enter key. NOTE: To use this property correctly you must set the droplistProps.filter property as false and handle the filtering yourself, since Autocomplete only has access to the droplistProps.items property and not the items already filtered by Droplist."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Input from '../Input';\r\nimport Droplist from '../Droplist';\r\nimport Label from '../Label';\r\n\r\n/**\r\n* This component integrates the Input, Droplist and Label components.\r\n* The value of Input filters the list in Droplist.\r\n* The selected items of Droplist can be stacked into Labels.\r\n*/\r\nclass Autocomplete extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.inputProps.valueProp ? props.inputProps.valueProp : '',\r\n            focus: false,\r\n            labels: []\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.onClear = this.onClear.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.addLabel = this.addLabel.bind(this);\r\n        this.removeLabel = this.removeLabel.bind(this);\r\n        this.removeSelected = this.removeSelected.bind(this);\r\n        this.forceValue = this.forceValue.bind(this);\r\n        this.labels = [];\r\n    }\r\n    \r\n    componentWillMount() {\r\n        let { onRef } = this.props;\r\n        if (onRef) onRef(this);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        let { onRef } = this.props;\r\n        if (onRef) onRef(undefined);\r\n    }\r\n    \r\n    onChange(value) {\r\n        const { onChange } = this.props;\r\n        this.setState({\r\n            value, focus: true\r\n        });\r\n        if (onChange) onChange(value);\r\n    }\r\n    \r\n    onFocus() {\r\n        const { onFocus } = this.props;\r\n        this.setState({\r\n            focus: true\r\n        });\r\n        if (onFocus) onFocus();\r\n    }\r\n    \r\n    onBlur() {\r\n        const { onBlur } = this.props;\r\n        setTimeout(() => {\r\n            this.setState({\r\n                focus: false\r\n            });\r\n        }, 200);\r\n        if (onBlur) onBlur();\r\n    }\r\n    \r\n    onKeyUp(key) {\r\n        const { onKeyUp, selectOnEnter, droplistProps, groups } = this.props;\r\n        if (selectOnEnter) {\r\n            if (key == 13) {\r\n                const cleanItems = this.removeSelected();\r\n                if (cleanItems.length) {\r\n                    if (!droplistProps.groups) {\r\n                        const item = cleanItems[0];\r\n                        this.onClick(item);\r\n                    } else {\r\n                        const item = cleanItems[0][droplistProps.groupItemsKey][0];\r\n                        this.onClick(item);\r\n                    }\r\n                } else {\r\n                    this.setState({\r\n                        value: ''\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (onKeyUp) onKeyUp(key);\r\n    }\r\n    \r\n    onClear() {\r\n        const { onClear } = this.props;\r\n        this.setState({\r\n            value: ''\r\n        });\r\n        if (onClear) onClear();\r\n    }\r\n    \r\n    onClick(item) {\r\n        const { onClick, onChange, droplistProps, stackLabels } = this.props;\r\n        if (stackLabels) {\r\n            this.child.onClear();\r\n            this.setState({\r\n                value: ''\r\n            });\r\n            this.child.child.focus();\r\n            this.addLabel(item);\r\n        } else {\r\n            this.setState({\r\n                value: item[droplistProps.itemTextKey], focus: false\r\n            });\r\n            if (onChange) onChange(item[droplistProps.itemTextKey]);\r\n        }\r\n        if (onClick) onClick(stackLabels ? this.labels : item);\r\n    }\r\n    \r\n    addLabel(item) {\r\n        this.labels.push(item);\r\n        this.setState({labels: this.labels});\r\n    }\r\n\r\n    removeLabel(item) {\r\n        const { droplistProps, onClick } = this.props;\r\n        let pos = this.labels.map(label => { return label[droplistProps.itemIdKey];}).indexOf(item[droplistProps.itemIdKey]);\r\n        this.labels.splice(pos, 1);\r\n        this.setState({labels: this.labels});\r\n        if (onClick) onClick(this.labels);\r\n    }\r\n    \r\n    removeSelected() {\r\n        const { labels } = this.state;\r\n        const { droplistProps } = this.props;\r\n        let cleanItems = [];\r\n        if (droplistProps.groups) {\r\n            droplistProps.items.map(group => {\r\n                let cleanGroup = group[droplistProps.groupItemsKey].filter(item => {\r\n                    const inLabels = labels.filter(label => {\r\n                        return label[droplistProps.itemIdKey] == item[droplistProps.itemIdKey];\r\n                    });\r\n                    return !inLabels.length;\r\n                });\r\n                const modifiedGroup = Object.assign({}, group);\r\n                modifiedGroup[droplistProps.groupItemsKey] = cleanGroup;\r\n                if (cleanGroup.length) cleanItems.push(modifiedGroup);\r\n            });\r\n        } else {\r\n            cleanItems = droplistProps.items.filter(item => {\r\n                const inLabels = labels.filter(label => {\r\n                    return label[droplistProps.itemIdKey] == item[droplistProps.itemIdKey];\r\n                });\r\n                return !inLabels.length;\r\n            });\r\n        }\r\n        return cleanItems;\r\n    }\r\n    \r\n    forceValue(value) {\r\n        this.setState({value});\r\n    }\r\n    \r\n    render() {\r\n        const { value, focus, labels } = this.state;\r\n        const { classes, id, inputProps, droplistProps, stackLabels, limit, limitPlaceholder, className, style } = this.props;\r\n        const cleanItems = this.removeSelected();\r\n        return (\r\n            <div className={`${classes.autoComplete}${className ? ` ${className}` : ''}`} id={id} style={style} ref = {ref => { this.autocomplete = ref; }}>\r\n                <Input\r\n                    onRef={ref => { this.child = ref; }}\r\n                    id={inputProps.id}\r\n                    type={inputProps.type}\r\n                    name={inputProps.name}\r\n                    label={inputProps.label}\r\n                    placeholder={((stackLabels && limit) && this.labels.length >= limit) ? limitPlaceholder : inputProps.placeholder}\r\n                    onChange={this.onChange}\r\n                    onFocus={this.onFocus}\r\n                    onBlur={this.onBlur}\r\n                    onKeyUp={this.onKeyUp}\r\n                    onClear={this.onClear}\r\n                    selectOnFocus={inputProps.selectOnFocus}\r\n                    clear={inputProps.clear}\r\n                    disabled={(stackLabels && limit) && this.labels.length >= limit}\r\n                    valueProp={value}\r\n                    iconName={inputProps.iconName}\r\n                    theme={inputProps.theme}\r\n                    className={`${classes.input}${inputProps.className ? ` ${inputProps.className}` : ''}`} />\r\n                {(value && focus && (cleanItems.length)) ? (\r\n                    <Droplist\r\n                        items={cleanItems}\r\n                        groups={droplistProps.groups}\r\n                        groupNameKey={droplistProps.groupNameKey}\r\n                        groupIdKey={droplistProps.groupIdKey}\r\n                        groupItemsKey={droplistProps.groupItemsKey}\r\n                        itemTextKey={droplistProps.itemTextKey}\r\n                        itemTextRightKey={droplistProps.itemTextRightKey}\r\n                        itemIdKey={droplistProps.itemIdKey}\r\n                        term={value}\r\n                        filter={droplistProps.filter}\r\n                        onClick={this.onClick}\r\n                        className={`${classes.droplist}${droplistProps.className ? ` ${droplistProps.className}` : ''}`} />\r\n                ) : null}\r\n                {(stackLabels && labels.length) ? (\r\n                    <div className={classes.labels}>\r\n                        {\r\n                            labels.map(label => (\r\n                                <Label key={label[droplistProps.itemIdKey]} onClose={() => {this.removeLabel(label);}}>{label[droplistProps.itemTextKey]}</Label>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                ) : ''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAutocomplete.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Object with the props for the Input component. Check their descriptions in the Input docs. */\r\n    inputProps: PropTypes.shape({\r\n        id: PropTypes.string,\r\n        type: PropTypes.string,\r\n        name: PropTypes.string,\r\n        label: PropTypes.string,\r\n        placeholder: PropTypes.string,\r\n        selectOnFocus: PropTypes.bool,\r\n        clear: PropTypes.bool,\r\n        iconName: PropTypes.string,\r\n        theme: PropTypes.string,\r\n        valueProp: PropTypes.string,\r\n        className: PropTypes.string\r\n    }).isRequired,\r\n    /** Object with the props for the Droplist component. Check their descriptions in the Droplist docs. */\r\n    droplistProps: PropTypes.shape({\r\n        items: PropTypes.array,\r\n        itemIdKey: PropTypes.string,\r\n        itemTextKey: PropTypes.string,\r\n        itemTextRightKey: PropTypes.string,\r\n        groups: PropTypes.bool,\r\n        groupIdKey: PropTypes.string,\r\n        groupNameKey: PropTypes.string,\r\n        groupItemsKey: PropTypes.string,\r\n        className: PropTypes.string,\r\n        filter: PropTypes.bool\r\n    }).isRequired,\r\n    /** Function to call on change (Input). */\r\n    onChange: PropTypes.func,\r\n    /** Function to call on focus (Input). */\r\n    onFocus: PropTypes.func,\r\n    /** Function to call on blur (Input). */\r\n    onBlur: PropTypes.func,\r\n    /** Function to call on clear (Input). */\r\n    onClear: PropTypes.func,\r\n    /** Function to call on click (Droplist item). */\r\n    onClick: PropTypes.func,\r\n    onRef: PropTypes.func,\r\n    /** Set this property to stack the selected items of Droplist into Labels. */\r\n    stackLabels: PropTypes.bool,\r\n    /** Set the limit of stackable items into labels. */\r\n    limit: PropTypes.number,\r\n    /** Change the placeholder when the limit of labels has been reached. */\r\n    limitPlaceholder: PropTypes.string,\r\n    /** Automatically selects the first item of the Droplist when pressing the Enter key. NOTE: To use this property correctly you must set the droplistProps.filter property as false and handle the filtering yourself, since Autocomplete only has access to the droplistProps.items property and not the items already filtered by Droplist. */\r\n    selectOnEnter: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nAutocomplete.defaultProps = {\r\n    inputProps: {},\r\n    droplistProps: {}\r\n};\r\n\r\nexport default Autocomplete;","examples":[{"name":"Example1","description":"","code":"/* Return the value on change */\r\nimport React from 'react';\r\nimport { Autocomplete } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)' },\r\n        { name: 'Item 2', secondary: '(5)' },\r\n        { name: 'Item 3', secondary: '(30)' }\r\n    ];\r\n    return (\r\n        <Autocomplete\r\n            droplistProps={{\r\n                items:items,\r\n                itemIdKey:\"name\",\r\n                itemTextKey:\"name\",\r\n                itemTextRightKey:\"secondary\"\r\n            }}\r\n            inputProps={{\r\n                label:\"Label\",\r\n                placeholder:\"Placeholder\",\r\n                valueProp:\"Item\"\r\n            }}\r\n            onChange={(value) => {console.log(value);}}\r\n        />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Return the item on click */\r\nimport React from 'react';\r\nimport { Autocomplete } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)' },\r\n        { name: 'Item 2', secondary: '(5)' },\r\n        { name: 'Item 3', secondary: '(30)' }\r\n    ];\r\n    return (\r\n        <Autocomplete\r\n            droplistProps={{\r\n                items:items,\r\n                itemIdKey:\"name\",\r\n                itemTextKey:\"name\",\r\n                itemTextRightKey:\"secondary\"\r\n            }}\r\n            inputProps={{\r\n                label:\"Label\",\r\n                placeholder:\"Placeholder\",\r\n                valueProp:\"Item\"\r\n            }}\r\n            onClick={(item) => {console.log(item);}}\r\n        />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Stack on labels */\r\nimport React from 'react';\r\nimport { Autocomplete } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)' },\r\n        { name: 'Item 2', secondary: '(5)' },\r\n        { name: 'Item 3', secondary: '(30)' }\r\n    ];\r\n    return (\r\n        <Autocomplete\r\n            droplistProps={{\r\n                items:items,\r\n                itemIdKey:\"name\",\r\n                itemTextKey:\"name\",\r\n                itemTextRightKey:\"secondary\"\r\n            }}\r\n            inputProps={{\r\n                label:\"Label\",\r\n                placeholder:\"Placeholder\",\r\n                valueProp:\"Item\"\r\n            }}\r\n            stackLabels\r\n            limit={2}\r\n            limitPlaceholder=\"You can't stack more labels\"\r\n            onClick={(items) => {console.log(items);}}\r\n        />\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Return the item on Enter */\r\nimport React from 'react';\r\nimport { Autocomplete } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    const items = [\r\n        { text: 'Países', id:'1',\r\n            items: [\r\n                { text: 'México', textRight: '(3405)', key: 'MX', type: 'CO', id:'1.1' }\r\n            ]\r\n        },\r\n        { text: 'Estados', id:'2',\r\n            items: [\r\n                { text: 'Querétaro', textRight: '(222)', key: 'QRO', type: 'ST', id:'2.1' },\r\n                { text: 'Estado de México', textRight: '(225)', key: 'EMX', type: 'ST', id:'2.2' }\r\n            ]\r\n        },\r\n        { text: 'Ciudades', id:'3',\r\n            items: [\r\n                { text: 'Santiago de Querétaro', textRight: '(102)', key: 'QRO2', type: 'CY', id:'3.1' }\r\n            ]\r\n        }\r\n    ];\r\n    return (\r\n        <Autocomplete\r\n            droplistProps={{\r\n                items:items,\r\n                itemIdKey:\"key\",\r\n                itemTextKey:\"text\",\r\n                itemTextRightKey:\"textRight\",\r\n                groups: true,\r\n                groupIdKey:\"id\",\r\n                groupNameKey:\"text\",\r\n                groupItemsKey:\"items\",\r\n                filter: false\r\n            }}\r\n            inputProps={{\r\n                label:\"Label\",\r\n                placeholder:\"Placeholder\"\r\n            }}\r\n            selectOnEnter\r\n            onChange={(value) => {console.log(value);}}\r\n        />\r\n    );\r\n}"}]},{"name":"Avatar","description":"The Avatar component shows a rounded avatar with a profile picture, a gender icon or the first two capital letters of a name.\r\nYou can use more than one property as a fallback in case one of the props is empty or wrong.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"photo":{"type":{"name":"string"},"required":false,"description":"A url to show a photo as the avatar."},"gender":{"type":{"name":"string"},"required":false,"description":"Use the values 'm' or 'f' to show a default avatar with an icon representing the gender."},"name":{"type":{"name":"string"},"required":false,"description":"Pass a name to show two initials."},"size":{"type":{"name":"number"},"required":false,"description":"The size of the avatar.","defaultValue":{"value":"70","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarContent from './AvatarContent';\r\n\r\n/**\r\n* The Avatar component shows a rounded avatar with a profile picture, a gender icon or the first two capital letters of a name.\r\n* You can use more than one property as a fallback in case one of the props is empty or wrong.\r\n*/\r\nclass Avatar extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, photo, gender, name, size, id, className, style } = this.props;\r\n        return (\r\n            <div id={id} className={`${classes.circle}${className ? ` ${className}` : ''}`} style={style}>\r\n                <AvatarContent photo={photo} gender={gender} name={name} size={size} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAvatar.defaultProps = {\r\n    size: 70\r\n};\r\n\r\nAvatar.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** A url to show a photo as the avatar. */\r\n    photo: PropTypes.string,\r\n    /** Use the values 'm' or 'f' to show a default avatar with an icon representing the gender. */\r\n    gender: PropTypes.string,\r\n    /** Pass a name to show two initials. */\r\n    name: PropTypes.string,\r\n    /** The size of the avatar. */\r\n    size: PropTypes.number,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Avatar;","examples":[{"name":"Example1","description":"","code":"/* Avatar with photo */\r\nimport React from 'react';\r\nimport { Avatar } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Avatar photo=\"http://placehold.it/70x70\" />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Avatar with gender icon */\r\nimport React from 'react';\r\nimport { Avatar } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Avatar gender=\"f\" />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Avatar with capital letters */\r\nimport React from 'react';\r\nimport { Avatar } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Avatar name=\"John Doe\" />\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Avatar with custom size */\r\nimport React from 'react';\r\nimport { Avatar } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <Avatar name=\"John Doe\" size={40} />\r\n    );\r\n}"}]},{"name":"Button","description":"A flexible button component, with four pre-stablished themes.\r\nThe Buton can behave like any button with an onClick function, or like an anchor with href and target.\r\nThere are 3 sizes available: small, medium and large.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"string"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"There are four themes available: main, secondary, white, blue, flat.","defaultValue":{"value":"'main'","computed":false}},"size":{"type":{"name":"string"},"required":false,"description":"The button has three different sizes: sm, md, lg.","defaultValue":{"value":"'sm'","computed":false}},"block":{"type":{"name":"bool"},"required":false,"description":"The block property lets the button expand to ocupy the whole width of its parent.","defaultValue":{"value":"false","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"It disables the button and shows it with the proper theme.","defaultValue":{"value":"false","computed":false}},"icon":{"type":{"name":"string"},"required":false,"description":"Use the name of any of the icons available in the library."},"loading":{"type":{"name":"bool"},"required":false,"description":"The loading property disables the button and shows a loading icon spinning."},"onClick":{"type":{"name":"func"},"required":false,"description":"The function to call when the button is clicked."},"href":{"type":{"name":"string"},"required":false,"description":"Optionally, you can set the href property and use it like a link."},"target":{"type":{"name":"string"},"required":false,"description":"If you use the href property, you can also define the target."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n* A flexible button component, with four pre-stablished themes.\r\n* The Buton can behave like any button with an onClick function, or like an anchor with href and target.\r\n* There are 3 sizes available: small, medium and large.\r\n*/\r\nclass Button extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, className, children, id, href, target, onClick, theme, size, block, disabled, icon, style, loading } = this.props;\r\n        let classNames=classes.btn;\r\n        if (theme) classNames += ` ${classes[theme]}`;\r\n        if (loading) classNames += ` ${classes.loading}`;\r\n        if (disabled) classNames += ` ${classes.disabled}`;\r\n        if (size == \"md\" || size == \"lg\") classNames += ` ${classes[size]}`;\r\n        if (block) classNames += ` ${classes.block}`;\r\n        if (className) classNames += ` ${className}`;\r\n        if (href) {\r\n            return (\r\n                <a\r\n                    className={classNames}\r\n                    href={!disabled ? href : ''}\r\n                    target={target ? target : ''}\r\n                    onClick={!disabled && onClick}\r\n                    id={id}\r\n                    style={style}>\r\n                    <span className={classes.cont}>\r\n                        {icon ? <i className={classes.icon} /> : ''}\r\n                        {children}\r\n                    </span>\r\n                    {loading && <span className={classes.loadCont}>\r\n                        <i className={classes.loadIcon} />\r\n                    </span>}\r\n                </a>\r\n            );\r\n        } else {\r\n            return (\r\n                <button\r\n                    className={classNames}\r\n                    onClick={!disabled && onClick}\r\n                    id={id}\r\n                    style={style}>\r\n                    <span className={classes.cont}>\r\n                        {icon ? <i className={classes.icon} /> : ''}\r\n                        {children}\r\n                    </span>\r\n                    {loading && <span className={classes.loadCont}>\r\n                        <i className={classes.loadIcon} />\r\n                    </span>}\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nButton.defaultProps = {\r\n    theme: 'main',\r\n    size: 'sm',\r\n    block: false,\r\n    disabled: false\r\n};\r\n\r\nButton.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.string,\r\n    /** There are four themes available: main, secondary, white, blue, flat. */\r\n    theme: PropTypes.string,\r\n    /** The button has three different sizes: sm, md, lg. */\r\n    size: PropTypes.string,\r\n    /** The block property lets the button expand to ocupy the whole width of its parent. */\r\n    block: PropTypes.bool,\r\n    /** It disables the button and shows it with the proper theme. */\r\n    disabled: PropTypes.bool,\r\n    /** Use the name of any of the icons available in the library. */\r\n    icon: PropTypes.string,\r\n    /** The loading property disables the button and shows a loading icon spinning. */\r\n    loading: PropTypes.bool,\r\n    /** The function to call when the button is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Optionally, you can set the href property and use it like a link. */\r\n    href: PropTypes.string,\r\n    /** If you use the href property, you can also define the target. */\r\n    target: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Button;","examples":[{"name":"Example1","description":"","code":"/* Themes */\r\nimport React from 'react';\r\nimport { Button, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Button theme=\"main\">Main</Button>\r\n            <Button theme=\"secondary\">Secondary</Button>\r\n            <Button theme=\"blue\">Blue</Button>\r\n            <Button theme=\"main\">Flat</Button>\r\n            <div style={{background:colors.grey7, marginTop:'15px', padding:'10px', display:'inline-block'}}>\r\n                <Button theme=\"white\">White</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Sizes */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Button size=\"sm\">Small</Button>\r\n            <Button size=\"md\">Medium</Button>\r\n            <Button size=\"lg\">Large</Button>\r\n        </div>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Block */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Button block>Block</Button>\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Button with an icon */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <Button icon=\"search\">Icon</Button>\r\n    );\r\n}"},{"name":"Example5","description":"","code":"/* Button loading */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <Button loading>Loading</Button>\r\n    );\r\n}"},{"name":"Example6","description":"","code":"/* Button disabled */\r\nimport React from 'react';\r\nimport { Button } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example6() {\r\n    return (\r\n        <Button disabled>Disabled</Button>\r\n    );\r\n}"}]},{"name":"ButtonAlign","description":"The Input component and the Button component have different sizes. That's why they wouldn't be aligned with each other when putting them side to side. Use this component to align the Button correctly with the Input.\r\nTo align it correctly, use the same size value used on the Button.\r\nRight below there are two examples, one aligned and one that is not.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"object"},"required":false,"description":""},"size":{"type":{"name":"string"},"required":false,"description":"Use the same size used in the button.","defaultValue":{"value":"'sm'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n* The Input component and the Button component have different sizes. That's why they wouldn't be aligned with each other when putting them side to side. Use this component to align the Button correctly with the Input.\r\n* To align it correctly, use the same size value used on the Button.\r\n* Right below there are two examples, one aligned and one that is not.\r\n*/\r\nclass ButtonAlign extends React.Component {\r\n    \r\n    render() {\r\n        \r\n        const { classes, children, size } = this.props;\r\n        return (\r\n            <div className={size ? classes[size] : classes.sm}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nButtonAlign.defaultProps = {\r\n    size: 'sm'\r\n};\r\n\r\nButtonAlign.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.object,\r\n    /** Use the same size used in the button. */\r\n    size: PropTypes.string\r\n};\r\n\r\nexport default ButtonAlign;","examples":[{"name":"Example1","description":"","code":"/* Button aligned with an input */\r\nimport React from 'react';\r\nimport { ButtonAlign, Button, Input, Flexbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Flexbox display=\"flex\">\r\n            <Input label=\"Input\" />\r\n            <ButtonAlign size=\"sm\">\r\n                <Button size=\"sm\">Aligned button</Button>\r\n            </ButtonAlign>\r\n        </Flexbox>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Button not aligned with an input */\r\nimport React from 'react';\r\nimport { Button, Input, Flexbox } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Flexbox display=\"flex\">\r\n            <Input label=\"Input\" />\r\n                <Button size=\"sm\">Not aligned button</Button>\r\n        </Flexbox>\r\n    );\r\n}"}]},{"name":"Card","description":"Container component with a card style","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"shadow":{"type":{"name":"number"},"required":false,"description":"Set the level of shadow of the card. Choose one between 1 and 6.","defaultValue":{"value":"3","computed":false}},"noPadding":{"type":{"name":"bool"},"required":false,"description":"The card has by default a padding. Use this property if you need to remove it."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Container component with a card style */\r\nclass Card extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, noPadding, shadow, className, style, id } = this.props;\r\n        return (\r\n            <div id={id} className={`${!noPadding ? classes.card : classes.cardNoPadding}${shadow ? ` ${classes[`shadow${shadow}`]}` : ''}${className ? ` ${className}` : ''}`} style={style}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCard.defaultProps = {\r\n    shadow: 3\r\n};\r\n\r\nCard.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Set the level of shadow of the card. Choose one between 1 and 6. */\r\n    shadow: PropTypes.number,\r\n    /** The card has by default a padding. Use this property if you need to remove it. */\r\n    noPadding: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Card;","examples":[{"name":"Example1","description":"","code":"/* Card with a shadow of level 6 */\r\nimport React from 'react';\r\nimport { Card, Title } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Card shadow={6}>\r\n            <Title h={3}>Card content</Title>\r\n        </Card>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Card with no padding */\r\nimport React from 'react';\r\nimport { Card, Title } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Card noPadding>\r\n            <Title h={3}>Card content</Title>\r\n        </Card>\r\n    );\r\n}"}]},{"name":"Check","description":"Checkbox component.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"input":{"type":{"name":"object"},"required":false,"description":"This is the object that redux-form passes to the component."},"value":{"type":{"name":"bool"},"required":false,"description":"Default value for the checkbox."},"onChange":{"type":{"name":"func"},"required":false,"description":"The function to call when the value of the checkbox changes."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the checkbox."},"label":{"type":{"name":"node"},"required":false,"description":"Text to display next to the checkbox."},"right":{"type":{"name":"string"},"required":false,"description":"Aditional text to display floating to the right."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Checkbox component. */\r\nclass Check extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.input ? props.input.value : props.value \r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        const { input, value } = props;\r\n        if (input && input.value != this.state.value)\r\n            this.setState({ value: input.value });\r\n        else if (value && this.state.value != value)\r\n            this.setState({ value });\r\n        else if(value != this.state.value)\r\n            this.setState({ value });\r\n    }\r\n\r\n    toggle() {\r\n        const { input, onChange, id, disabled } = this.props;\r\n        if (!disabled) {\r\n            let value = !this.state.value;\r\n            this.setState({ value });\r\n            if (input) input.onBlur(value);\r\n            if (onChange) onChange(value, id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.state;\r\n        const { classes, input, label, right, disabled, id, className, style } = this.props;\r\n        let state = input && input.value ? input.value : value;\r\n        return (\r\n            <div\r\n                id={id}\r\n                className={`${classes.cont}${state ? ` ${classes.active}` : ''}${disabled ? ` ${classes.disabled}` : ''}${className ? ` ${className}` : ''}`}\r\n                tabIndex={0}\r\n                onClick={this.toggle}\r\n                style={style}>\r\n                <div className={classes.check} />\r\n                {label && <span className={classes.label}>{label}</span>}\r\n                {right && <span className={classes.right}>{right}</span>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCheck.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** This is the object that redux-form passes to the component. */\r\n    input: PropTypes.object,\r\n    /** Default value for the checkbox. */\r\n    value: PropTypes.bool,\r\n    /** The function to call when the value of the checkbox changes. */\r\n    onChange: PropTypes.func,\r\n    /** Disable the checkbox. */\r\n    disabled: PropTypes.bool,\r\n    /** Text to display next to the checkbox.  */\r\n    label: PropTypes.node,\r\n    /** Aditional text to display floating to the right. */\r\n    right: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Check;","examples":[{"name":"Example1","description":"","code":"/* Checkbox with default value */\r\nimport React from 'react';\r\nimport { Check } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Check value />\r\n        </div>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Checkbox with label and text on the right */\r\nimport React from 'react';\r\nimport { Check } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div style={{display:'inline-block', width:300}}>\r\n            <Check label=\"Label\" right=\"Right text\" />\r\n        </div>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Disabled checkbox */\r\nimport React from 'react';\r\nimport { Check } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Check label=\"Disabled\" disabled />\r\n        </div>\r\n    );\r\n}"}]},{"name":"Column","description":"The Container component can receive different specifications for any of the breakpoint sizes. It needs to receive an object for the required size, and this object can specify a value for col (column), offset, push and pull.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"object"},"required":false,"description":"Specifications for a extra small window size."},"sm":{"type":{"name":"object"},"required":false,"description":"Specifications for a small window size."},"md":{"type":{"name":"object"},"required":false,"description":"Specifications for a medium window size."},"lg":{"type":{"name":"object"},"required":false,"description":"Specifications for a large window size."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst getClasses = function(size, data, classes) {\r\n    let string = '';\r\n    if (data.col) string+=' '+classes[`${size}${data.col}`];\r\n    if (data.offset) string+=' '+classes[`offset-${size}${data.offset}`];\r\n    if (data.push) string+=' '+classes[`push-${size}${data.push}`];\r\n    if (data.pull) string+=' '+classes[`pull-${size}${data.pull}`];\r\n    return string;\r\n};\r\n\r\n/** The Container component can receive different specifications for any of the breakpoint sizes. It needs to receive an object for the required size, and this object can specify a value for col (column), offset, push and pull. */\r\nconst Column = ({ classes, children, xs, sm, md, lg, id, className, style }) => (\r\n    <div\r\n        className={`${classes.col}${xs ? getClasses('xs', xs, classes) : ''}${sm ? getClasses('sm', sm, classes) : ''}${md ? getClasses('md', md, classes) : ''}${lg ? getClasses('lg', lg, classes) : ''}${className ? ` ${className}` : ''}`}\r\n        id={id}\r\n        style={style}>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nColumn.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Specifications for a extra small window size. */\r\n    xs: PropTypes.object,\r\n    /** Specifications for a small window size. */\r\n    sm: PropTypes.object,\r\n    /** Specifications for a medium window size. */\r\n    md: PropTypes.object,\r\n    /** Specifications for a large window size. */\r\n    lg: PropTypes.object,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Column;","examples":[{"name":"Example1","description":"","code":"/* Columns */\r\nimport React from 'react';\r\nimport { Container, Row, Column, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n            <Row style={{background:colors.grey4}}>\r\n                <Column xs={{col:6}} style={{background:colors.grey5}}>Column</Column>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Different breakpoints */\r\nimport React from 'react';\r\nimport { Container, Row, Column, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n            <Row style={{background:colors.grey4}}>\r\n                <Column xs={{col:12}} sm={{col:9}} md={{col:6}} lg={{col:4}} style={{background:colors.grey5}}>Column</Column>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Push, pull & offset */\r\nimport React from 'react';\r\nimport { Container, Row, Column, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n            <Row style={{background:colors.grey4}}>\r\n                <Column xs={{col:3, offset:1}} style={{background:colors.grey5}}>Offset</Column>\r\n                <Column xs={{col:3, pull:1}} style={{background:colors.grey5}}>Pull</Column>\r\n                <Column xs={{col:3, push:1}} style={{background:colors.grey5}}>Push</Column>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"}]},{"name":"Container","description":"The container should be used as the main content container. You can't use a container inside of another container, it will brake your grid.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"fluid":{"type":{"name":"bool"},"required":false,"description":"By default, the Container component has a specified width for any screen size. The fluid property allows the Container to extend to a 100% width."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** The container should be used as the main content container. You can't use a container inside of another container, it will brake your grid. */\r\nconst Container = ({ classes, children, fluid, className, id, style }) => (\r\n    <div className={`${fluid ? classes.conFluid : classes.con}${className ? ` ${className}` : ''}`} style={style} id={id}>{children}</div>\r\n);\r\n\r\nContainer.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** By default, the Container component has a specified width for any screen size. The fluid property allows the Container to extend to a 100% width. */\r\n    fluid: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Container;","examples":[{"name":"Example1","description":"","code":"/* Container fluid */\r\nimport React from 'react';\r\nimport { Container, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>Container</Container>\r\n    );\r\n}"}]},{"name":"Droplist","description":"The Droplist component displays a list and filters it with the prop 'term'.\r\nThe value of 'term' es highlighted in every item that matches.\r\nThe array of objects needed to display the items needs a text and an id, and can contain a text that floats on the right. If you're going to group your items by category, you first need to set an array of groups, and each group must contain an array with the items.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"items":{"type":{"name":"array"},"required":false,"description":"Array of objects with all the items to display."},"term":{"type":{"name":"string"},"required":false,"description":"Term to filter the items of the Droplist.","defaultValue":{"value":"''","computed":false}},"itemTextKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object, to use as the text.","defaultValue":{"value":"'text'","computed":false}},"itemTextRightKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object, to use as the text that floats on the right.","defaultValue":{"value":"'textRight'","computed":false}},"itemIdKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object, to use as the id.","defaultValue":{"value":"'id'","computed":false}},"groups":{"type":{"name":"bool"},"required":false,"description":"Use this if the items are grouped in different categories.","defaultValue":{"value":"false","computed":false}},"groupNameKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object to use as the name of the group.","defaultValue":{"value":"'text'","computed":false}},"groupIdKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object to use as the id of the group.","defaultValue":{"value":"'id'","computed":false}},"groupItemsKey":{"type":{"name":"string"},"required":false,"description":"Key to find in the object where you can find the array of items.","defaultValue":{"value":"'items'","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call when an item is clicked."},"filter":{"type":{"name":"bool"},"required":false,"description":"Filters given items if they match with the term.","defaultValue":{"value":"true","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n* The Droplist component displays a list and filters it with the prop 'term'.\r\n* The value of 'term' es highlighted in every item that matches.\r\n* The array of objects needed to display the items needs a text and an id, and can contain a text that floats on the right. If you're going to group your items by category, you first need to set an array of groups, and each group must contain an array with the items.\r\n*/\r\nclass Droplist extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: props.term ? props.term.trim() : ''\r\n        };\r\n        this.onClick = this.onClick.bind(this);\r\n        this.renderList = this.renderList.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.term != this.state.term) {\r\n            this.setState({\r\n                term: props.term.trim()\r\n            });\r\n        }\r\n    }\r\n\r\n    onClick(item) {\r\n        const { onClick } = this.props;\r\n        if (onClick) onClick(item);\r\n    }\r\n\r\n    compareText(text = \"\", term) {\r\n        let textLC = text.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n        let termLC = term.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n        let index = textLC.indexOf(termLC);\r\n        return index;\r\n    }\r\n    \r\n    separateText(itemText = \"\", index, term) {\r\n        let text = [itemText.substr(0, index), itemText.substr(index, term.length), itemText.substr(index+term.length, itemText.length)];\r\n        return text;\r\n    }\r\n    \r\n    renderList(items) {\r\n        const { term } = this.state;\r\n        const { classes, itemIdKey, itemTextKey, itemTextRightKey, filter } = this.props;\r\n        const itemsDOM = items.map(item => {\r\n            let index = this.compareText(item[itemTextKey], term);\r\n            if (index >= 0) {\r\n                let text = this.separateText(item[itemTextKey], index, term);\r\n                return (\r\n                    <div\r\n                        key={item[itemIdKey]}\r\n                        onClick={() => this.onClick(item)}\r\n                        className={classes.item}>\r\n                        {text[0].length ? text[0] : ''}\r\n                        <span className={classes.bold}>{text[1].length ? text[1] : ''}</span>\r\n                        {text[2].length ? text[2] : ''}\r\n                        {item[itemTextRightKey] ? <span className={classes.right}>{item[itemTextRightKey]}</span> : ''}\r\n                    </div>\r\n                );\r\n            } else {\r\n                if (filter) {\r\n                    return false;\r\n                } else {\r\n                    return (\r\n                        <div\r\n                            key={item[itemIdKey]}\r\n                            onClick={() => this.onClick(item)}\r\n                            className={classes.item}>\r\n                            {item[itemTextKey]}\r\n                            {item[itemTextRightKey] ? <span className={classes.right}>{item[itemTextRightKey]}</span> : ''}\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            \r\n        });\r\n        return itemsDOM;\r\n    }\r\n    \r\n    render() {\r\n        const { classes, className, style, id, items, groups, groupNameKey, groupIdKey, groupItemsKey } = this.props;\r\n        return (\r\n            <div className={`${classes.block}${className ? ` ${className}` : ''}`} id={id} style={style}>\r\n                {\r\n                    groups ? (\r\n                        items.map(group => {\r\n                            return (\r\n                                <div key={group[groupIdKey]} className={classes.groupCon}>\r\n                                    <div className={classes.group}>{group[groupNameKey]}</div>\r\n                                    {\r\n                                        this.renderList(group[groupItemsKey])\r\n                                    }\r\n                                </div>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        this.renderList(items)\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDroplist.defaultProps = {\r\n    groups: false,\r\n    groupNameKey:'text',\r\n    groupIdKey:'id',\r\n    groupItemsKey:'items',\r\n    itemTextKey:'text',\r\n    itemTextRightKey:'textRight',\r\n    itemIdKey:'id',\r\n    term:'',\r\n    filter: true\r\n};\r\n\r\nDroplist.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Array of objects with all the items to display. */\r\n    items: PropTypes.array,\r\n    /** Term to filter the items of the Droplist. */\r\n    term: PropTypes.string,\r\n    /** Key to find in the object, to use as the text. */\r\n    itemTextKey: PropTypes.string,\r\n    /** Key to find in the object, to use as the text that floats on the right. */\r\n    itemTextRightKey: PropTypes.string,\r\n    /** Key to find in the object, to use as the id. */\r\n    itemIdKey: PropTypes.string,\r\n    /** Use this if the items are grouped in different categories. */\r\n    groups: PropTypes.bool,\r\n    /** Key to find in the object to use as the name of the group. */\r\n    groupNameKey: PropTypes.string,\r\n    /** Key to find in the object to use as the id of the group. */\r\n    groupIdKey: PropTypes.string,\r\n    /** Key to find in the object where you can find the array of items. */\r\n    groupItemsKey: PropTypes.string,\r\n    /** Function to call when an item is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Filters given items if they match with the term. */\r\n    filter: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Droplist;","examples":[{"name":"Example1","description":"","code":"/* List items */\r\nimport React from 'react';\r\nimport { Droplist } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)' },\r\n        { name: 'Item 2', secondary: '(5)' },\r\n        { name: 'Item 3', secondary: '(30)' }\r\n    ];\r\n    return (\r\n        <Droplist\r\n            items={items}\r\n            itemIdKey=\"name\"\r\n            itemTextKey=\"name\"\r\n            itemTextRightKey=\"secondary\"\r\n        />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* List groups */\r\nimport React from 'react';\r\nimport { Droplist } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const items = [\r\n        {\r\n            group:'Group 1',\r\n            items: [\r\n                { name: 'Item 1', secondary: '(10)' },\r\n                { name: 'Item 2', secondary: '(5)' },\r\n                { name: 'Item 3', secondary: '(30)' }\r\n            ]\r\n        },\r\n        {\r\n            group:'Group 2',\r\n            items: [\r\n                { name: 'Item 4', secondary: '(25)' }\r\n            ]\r\n        }\r\n    ];\r\n    return (\r\n        <Droplist \r\n            items={items}\r\n            groups\r\n            groupIdKey=\"group\"\r\n            groupNameKey=\"group\"\r\n            groupItemsKey=\"items\"\r\n            itemIdKey=\"name\"\r\n            itemTextKey=\"name\"\r\n            itemTextRightKey=\"secondary\"\r\n        />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Return object to console on click */\r\nimport React from 'react';\r\nimport { Droplist } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    const items = [\r\n        { name: 'Item 1', secondary: '(10)', someData:'1234567890' },\r\n    ];\r\n    return (\r\n        <Droplist\r\n            items={items}\r\n            itemIdKey=\"name\"\r\n            itemTextKey=\"name\"\r\n            itemTextRightKey=\"secondary\"\r\n            onClick={(item) => {console.log(item);}}\r\n        />\r\n    );\r\n}"}]},{"name":"Flexbox","description":"The Flexbox component uses the grid system of flexbox.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"display":{"type":{"name":"string"},"required":false,"description":"Use the value 'flex' or 'inline-flex' to give your container the flex properties. If you're using the Flexbox component just as a child of another Flexbox, then don't specify any value here."},"direction":{"type":{"name":"string"},"required":false,"description":"The direction property specifies in which direction the items will be aligned. The options are 'col' (column), 'row', 'colR' (column reverse) and 'rowR' (row reverse)."},"wrap":{"type":{"name":"string"},"required":false,"description":"The wrap property specifies if the content will cut to a new line or not. The options are 'wrap', 'noWrap' and 'wrapR' (wrap reverse)."},"justifyContent":{"type":{"name":"string"},"required":false,"description":"justifyContent is the way the items are going to be aligned in the column or row (according to the value given in 'direction'). The options are 'start' (flex-start), 'end' (flex-end), 'center', 'between' (space-between), 'around' (space-around) and 'evenly' (space-evenly)."},"alignItems":{"type":{"name":"string"},"required":false,"description":"alignItems determines how the items will be aligned in the specified direction axis. The options are 'start' (flex-start), 'end' (flex-end), 'center', 'baseline' and 'stretch'."},"alignContent":{"type":{"name":"string"},"required":false,"description":"This property has effect when there's more than one line of items. It determines how this items are going to be aligned."},"flex":{"type":{"name":"string"},"required":false,"description":"Use this property if your Flexbox is a child of another Flexbox and you want to specify its flex properties (flex-grow, flex-shrink and flex-basis)."},"order":{"type":{"name":"number"},"required":false,"description":"Use the order property for a Flexbox inside of another Flexbox to specify its order."},"alignSelf":{"type":{"name":"string"},"required":false,"description":"Use it in the same case as flex and order. The alignSelf property allows you to override the value of alignItems."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** The Flexbox component uses the grid system of flexbox. */\r\nclass Flexbox extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, display, direction, wrap, justifyContent, alignItems, alignContent, order, flex, alignSelf, id, className } = this.props;\r\n        let { style } = this.props;\r\n        let displayClass = display ? display == 'inline-flex' ? classes.iFlex : classes.flex : '';\r\n        if (!style)\r\n            style = {};\r\n        if (order)\r\n            style.order = order;\r\n        if (flex)\r\n            style.flex = flex;\r\n        return (\r\n            <div\r\n                className={`${displayClass}${(display && direction) ? ` ${classes[direction]}` : ''}${(display && wrap) ? ` ${classes[wrap]}` : ''}${(display && justifyContent) ? ` ${classes[`j${justifyContent}`]}` : ''}${(display && alignItems) ? ` ${classes[`a${alignItems}`]}` : ''}${(display && alignContent) ? ` ${classes[`c${alignContent}`]}` : ''}${(alignSelf) ? ` ${classes[`s${alignSelf}`]}` : ''}${className ? ` ${className}` : ''}`}\r\n                id={id}\r\n                style={style}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFlexbox.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Use the value 'flex' or 'inline-flex' to give your container the flex properties. If you're using the Flexbox component just as a child of another Flexbox, then don't specify any value here. */\r\n    display: PropTypes.string,\r\n    /** The direction property specifies in which direction the items will be aligned. The options are 'col' (column), 'row', 'colR' (column reverse) and 'rowR' (row reverse). */\r\n    direction: PropTypes.string,\r\n    /** The wrap property specifies if the content will cut to a new line or not. The options are 'wrap', 'noWrap' and 'wrapR' (wrap reverse). */\r\n    wrap: PropTypes.string,\r\n    /** justifyContent is the way the items are going to be aligned in the column or row (according to the value given in 'direction'). The options are 'start' (flex-start), 'end' (flex-end), 'center', 'between' (space-between), 'around' (space-around) and 'evenly' (space-evenly). */\r\n    justifyContent: PropTypes.string,\r\n    /** alignItems determines how the items will be aligned in the specified direction axis. The options are 'start' (flex-start), 'end' (flex-end), 'center', 'baseline' and 'stretch'. */\r\n    alignItems: PropTypes.string,\r\n    /** This property has effect when there's more than one line of items. It determines how this items are going to be aligned. */\r\n    alignContent: PropTypes.string,\r\n    /** Use this property if your Flexbox is a child of another Flexbox and you want to specify its flex properties (flex-grow, flex-shrink and flex-basis). */\r\n    flex: PropTypes.string,\r\n    /** Use the order property for a Flexbox inside of another Flexbox to specify its order. */\r\n    order: PropTypes.number,\r\n    /** Use it in the same case as flex and order. The alignSelf property allows you to override the value of alignItems. */\r\n    alignSelf: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Flexbox;","examples":[{"name":"Example1","description":"","code":"/* Row and Column */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"inline-flex\" direction=\"row\" style={{background:colors.grey3, width:200, height:100}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n            <Flexbox display=\"inline-flex\" direction=\"col\" style={{background:colors.grey3, width:100, height:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Wrap */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"inline-flex\" wrap=\"wrap\" style={{background:colors.grey3, width:200, height:100, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n            <Flexbox display=\"inline-flex\" wrap=\"noWrap\" style={{background:colors.grey3, width:200, height:100, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Justify content */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"flex\" justifyContent=\"start\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"end\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"center\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"between\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"around\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" justifyContent=\"evenly\" style={{background:colors.grey3, width:200}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Align items */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"flex\" alignItems=\"start\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"end\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"center\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"stretch\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"base\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example5","description":"","code":"/* Align content */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"start\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"end\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"center\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"between\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" wrap=\"wrap\" alignContent=\"around\" style={{background:colors.grey3, width:125, height:125, resize:'both', overflow:'auto'}}>\r\n                <div style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</div>\r\n                <div style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</div>\r\n                <div style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</div>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"},{"name":"Example6","description":"","code":"/* Child Flexbox */\r\nimport React from 'react';\r\nimport { Flexbox, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example6() {\r\n    return (\r\n        <div>\r\n            <Flexbox display=\"flex\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <Flexbox order={2} style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</Flexbox>\r\n                <Flexbox order={3} style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</Flexbox>\r\n                <Flexbox order={1} style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</Flexbox>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <Flexbox flex=\"1\" style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</Flexbox>\r\n                <Flexbox style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</Flexbox>\r\n                <Flexbox style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</Flexbox>\r\n            </Flexbox><br />\r\n            <Flexbox display=\"flex\" alignItems=\"center\" style={{background:colors.grey3, width:200, height:75}}>\r\n                <Flexbox alignSelf=\"end\" style={{background:'#508898', width:50, height:50, color:'#fff'}}>1</Flexbox>\r\n                <Flexbox style={{background:'#819fae', width:50, height:50, color:'#fff'}}>2</Flexbox>\r\n                <Flexbox style={{background:'#BBDAE3', width:50, height:50, color:'#fff'}}>3</Flexbox>\r\n            </Flexbox>\r\n        </div>\r\n    );\r\n}"}]},{"name":"Footer","description":"The Footer component handles an array of objects and sub-arrays to have a footer of two levels of depth.\r\nThe items of frist level must have an id and a label. They also can have an href and target, or an onClick.\r\nIf the item is going to have sub-items, they must be in sub. This is an array with a similar structure as the first level.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"buttons":{"type":{"name":"array"},"required":false,"description":"Array of objects. Each object must have all the properties wanted for that specific button and sub-buttons."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport $ from 'jquery';\r\n\r\nimport Container from '../Container';\r\n\r\n/**\r\n* The Footer component handles an array of objects and sub-arrays to have a footer of two levels of depth.\r\n* The items of frist level must have an id and a label. They also can have an href and target, or an onClick.\r\n* If the item is going to have sub-items, they must be in sub. This is an array with a similar structure as the first level.\r\n*/\r\nclass Footer extends React.Component {\r\n    \r\n    showSub(button) {\r\n        $('#'+button.sub.id).fadeIn('fast').click((e) => {\r\n            e.stopPropagation();\r\n        });\r\n        $('#'+button.sub.id+' a').click(function() {\r\n            $('#'+button.sub.id).fadeOut('fast');\r\n        });\r\n        $('body').click(function() {\r\n            $('#'+button.sub.id).fadeOut('fast');\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { classes, buttons } = this.props;\r\n        return (\r\n            <Container fluid={true} className={classes.footer}>\r\n                <ul className={classes.footerList}>\r\n                    {\r\n                        buttons.map(button => (\r\n                            <li key={button.id} className={classes.listElement}>\r\n                                <a className={classes.link} id={button.id} href={button.href} target={button.target} onClick={'sub' in button ? () => {this.showSub(button);} : button.onClick ? button.onClick : undefined}>{button.label}</a>\r\n                                {button.sub && (\r\n                                    <ul className={classes.dropdownMenu} id={button.sub.id} style={button.sub.style}>\r\n                                        {button.sub.items.map(item => (\r\n                                            <li key={item.id} className={classes.dropdownElement}>\r\n                                                <a className={classes.dropdownLink} id={item.id} href={item.href} target={item.target}>{item.label}</a>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                )}\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nFooter.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Array of objects. Each object must have all the properties wanted for that specific button and sub-buttons. */\r\n    buttons: PropTypes.array\r\n};\r\n\r\nexport default Footer;","examples":[{"name":"Example1","description":"","code":"/* Simple Footer */\r\nimport React from 'react';\r\nimport { Footer } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const buttons = [\r\n        { id: 'occ', label: 'OCC', href:'https://occ.com.mx', target:'_blank' },\r\n        { id: 'submenu', label: 'Item with submenu', sub: {\r\n            id: 'submenu-items',\r\n            items: [\r\n                { id: 'subitem1', label: 'Sub-item 1', href:'#Footer' },\r\n                { id: 'subitem2', label: 'Sub-item 2', href:'#Footer' }\r\n            ]\r\n        }}\r\n    ];\r\n    return (\r\n        <Footer buttons={buttons} />\r\n    );\r\n}"}]},{"name":"Header","description":"This header component should be filled with a logo section, a nav section and a user menu.\r\nFor the nav section, use the Nav component of this library. In desktop it will be displayed rght next to the logo. In mobile it will appear below the logo and user menu.\r\nFor the user menu, use the Menu component of this library.\r\nThis header includes a Messages/Chat icon, which you can configure with the messageIcon property.\r\n(NOTE: The example will not work properly in mobile, since it uses fixed positioning, breaking the Header because is not in the top of the page.)\r\nThe documentation for Nav and Menu is not included here, since they are completely dependant of Header. Use the example below to see how to implement them.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"logo":{"type":{"name":"node"},"required":false,"description":"Send any content as the logo of your app."},"title":{"type":{"name":"string"},"required":false,"description":"The title of the section you're in. This will be visible in mobile."},"nav":{"type":{"name":"node"},"required":false,"description":"Nav component with the required props."},"menu":{"type":{"name":"node"},"required":false,"description":"Menu component with the required props."},"messagesIcon":{"type":{"name":"object"},"required":false,"description":"Object with the properties to display the message/chat icon. To show it, pass an object with active: true, an id and the href property.","defaultValue":{"value":"{}","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Waypoint from 'react-waypoint';\r\n\r\nimport Hidden from '../Hidden';\r\nimport Visible from '../Visible';\r\n\r\n/**\r\n* This header component should be filled with a logo section, a nav section and a user menu.\r\n* For the nav section, use the Nav component of this library. In desktop it will be displayed rght next to the logo. In mobile it will appear below the logo and user menu.\r\n* For the user menu, use the Menu component of this library.\r\n* This header includes a Messages/Chat icon, which you can configure with the messageIcon property.\r\n* (NOTE: The example will not work properly in mobile, since it uses fixed positioning, breaking the Header because is not in the top of the page.)\r\n* The documentation for Nav and Menu is not included here, since they are completely dependant of Header. Use the example below to see how to implement them.\r\n*/\r\nclass Header extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            shadow: true\r\n        };\r\n        this.removeShadow = this.removeShadow.bind(this);\r\n        this.addShadow = this.addShadow.bind(this);\r\n    }\r\n    \r\n    removeShadow() {\r\n        this.setState({\r\n            shadow: false\r\n        });\r\n    }\r\n    \r\n    addShadow() {\r\n        this.setState({\r\n            shadow: true\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { shadow } = this.state;\r\n        const { classes, logo, nav, menu, title, messagesIcon } = this.props;\r\n        return (\r\n            <div id=\"mainNav\" className={classes.navbar}>\r\n                <div className={`${classes.master} ${shadow ? classes.shadow : ''}`}>\r\n                    <div className={classes.content}>\r\n                        <Hidden xs>\r\n                            {logo}\r\n                        </Hidden>\r\n                        <Visible xs>\r\n                            <div className={classes.title}>{title}</div>\r\n                        </Visible>\r\n                        <div className={classes.user}>\r\n                            {(messagesIcon.hasOwnProperty('active') && messagesIcon.active) && (\r\n                                <a id={messagesIcon.id} href={messagesIcon.href} className={classes.messages}>\r\n                                    <i className={classes.bubble} />\r\n                                </a>\r\n                                )}\r\n                            {menu}\r\n                        </div>\r\n                        <Hidden xs>\r\n                            {nav}\r\n                        </Hidden>\r\n                    </div>\r\n                </div>\r\n                <Visible xs>\r\n                    <div className={classes.separate}>\r\n                        <Waypoint topOffset={60} onEnter={this.removeShadow} onLeave={this.addShadow}>\r\n                            <div className={!shadow ? classes.shadow : ''}>\r\n                                {nav}\r\n                            </div>\r\n                        </Waypoint>\r\n                    </div>\r\n                </Visible>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.defaultProps = {\r\n    messagesIcon: {}\r\n};\r\n\r\nHeader.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Send any content as the logo of your app. */\r\n    logo: PropTypes.node,\r\n    /** The title of the section you're in. This will be visible in mobile. */\r\n    title: PropTypes.string,\r\n    /** Nav component with the required props. */\r\n    nav: PropTypes.node,\r\n    /** Menu component with the required props. */\r\n    menu: PropTypes.node,\r\n    /** Object with the properties to display the message/chat icon. To show it, pass an object with active: true, an id and the href property. */\r\n    messagesIcon: PropTypes.object\r\n};\r\n\r\nexport default Header;","examples":[{"name":"Example1","description":"","code":"/* Implementation with state and navigation function */\r\nimport React from 'react';\r\nimport { Header, SightLogo, Nav, Menu } from '@occmundial/occ-atomic';\r\n\r\nexport default class Example1 extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: 'item1'\r\n        };\r\n        this.navigate = this.navigate.bind(this);\r\n    }\r\n    \r\n    navigate({ currentTarget: { id } }) {\r\n        this.setState({\r\n            selected: id\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { selected } = this.state;\r\n        const nav = [\r\n            { id: 'item1', icon:'search', label: 'Search' },\r\n            { id: 'item2', icon:'filter', label: 'Filters'},\r\n            { id: 'item3', icon:'like', label: 'Stuff' },\r\n        ];\r\n        const menu = [\r\n            { id: 'menu1', href:'#Header', label: 'Item 1' },\r\n            { id: 'menu2', href:'#Header', label: 'Item 2' },\r\n            \"separator\",\r\n            { id: 'menu3', href:'#Header', label: 'Item 3', type:\"signOut\" },\r\n        ];\r\n        return (\r\n            <Header\r\n                logo={<SightLogo />}\r\n                nav={<Nav active={selected} navigate={this.navigate} buttons={nav} />}\r\n                menu={<Menu label=\"User menu\" buttons={menu} />}\r\n            />\r\n        );\r\n    }\r\n}"}]},{"name":"Hidden","description":"Hides the content on the specified window size.","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"bool"},"required":false,"description":"Apply in extra small window size."},"sm":{"type":{"name":"bool"},"required":false,"description":"Apply in small window size."},"md":{"type":{"name":"bool"},"required":false,"description":"Apply in medium window size."},"lg":{"type":{"name":"bool"},"required":false,"description":"Apply in large window size."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport grid from '../subatomic/grid';\r\n\r\n/** Hides the content on the specified window size. */\r\nclass Hidden extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 0\r\n        };\r\n        this.getDimensions = this.getDimensions.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getDimensions();\r\n        window.addEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this.getDimensions();\r\n        window.removeEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    getDimensions() {\r\n        const width = window.innerWidth;\r\n        this.setState({\r\n            width\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { width } = this.state;\r\n        const { children, xs, sm, md, lg} = this.props;\r\n        if (\r\n            ((width >= grid.xs && width < grid.sm) && xs) ||\r\n            ((width >= grid.sm && width < grid.md) && sm) ||\r\n            ((width >= grid.md && width < grid.lg) && md) ||\r\n            ((width >= grid.lg) && lg)\r\n        ) {\r\n            return <span />;\r\n        } else {\r\n            return <span>{children}</span>;\r\n        }\r\n    }\r\n}\r\n\r\nHidden.propTypes = {\r\n    children: PropTypes.node,\r\n    /** Apply in extra small window size. */\r\n    xs: PropTypes.bool,\r\n    /** Apply in small window size. */\r\n    sm: PropTypes.bool,\r\n    /** Apply in medium window size. */\r\n    md: PropTypes.bool,\r\n    /** Apply in large window size. */\r\n    lg: PropTypes.bool\r\n};\r\n\r\nexport default Hidden;","examples":[{"name":"Example1","description":"","code":"/* Hide content in small window size */\r\nimport React from 'react';\r\nimport { Hidden } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Hidden sm>Content</Hidden>\r\n    );\r\n}"}]},{"name":"Icon","description":"Component to display any of the icons on the library.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"iconName":{"type":{"name":"string"},"required":true,"description":"Name of the icon to render. It must match with any of the icons on the library."},"width":{"type":{"name":"number"},"required":false,"description":"Width of the icon. By default it will take the value defined on the library for the specified icon."},"height":{"type":{"name":"number"},"required":false,"description":"Height of the icon. By default it will take the value defined on the library for the specified icon."},"display":{"type":{"name":"string"},"required":false,"description":"Display property of the icon. By default it will take the value defined on the library for the specified icon."},"transition":{"type":{"name":"string"},"required":false,"description":"Transition for animations.","defaultValue":{"value":"'0.3s all'","computed":false}},"colors":{"type":{"name":"array"},"required":false,"description":"Array with the colors to use in the icon. Some icons use more than one color. By default it will take the value defined on the library for the specified icon."},"hover":{"type":{"name":"array"},"required":false,"description":"Array with the colors to use on the icon when it's hovered."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call when the icon is clicked."},"alt":{"type":{"name":"string"},"required":false,"description":"Alt property, in case you need to set it."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Component to display any of the icons on the library. */\r\nclass Icon extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, className, style, id, onClick, alt } = this.props;\r\n        const IconType = onClick ? 'button' : 'span';\r\n        return (\r\n            <IconType id={id} className={`${classes.icon}${onClick ? ` ${classes.click}` : ''}${className ? ` ${className}` : ''}`} style={style} onClick={onClick} alt={alt} />\r\n        );\r\n    }\r\n}\r\n\r\nIcon.defaultProps = {\r\n    transition: '0.3s all'\r\n};\r\n\r\nIcon.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Name of the icon to render. It must match with any of the icons on the library. */\r\n    iconName: PropTypes.string.isRequired,\r\n    /** Width of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    width: PropTypes.number,\r\n    /** Height of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    height: PropTypes.number,\r\n    /** Display property of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    display: PropTypes.string,\r\n    /** Transition for animations. */\r\n    transition: PropTypes.string,\r\n    /** Array with the colors to use in the icon. Some icons use more than one color. By default it will take the value defined on the library for the specified icon. */\r\n    colors: PropTypes.array,\r\n    /** Array with the colors to use on the icon when it's hovered. */\r\n    hover: PropTypes.array,\r\n    /** Function to call when the icon is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Alt property, in case you need to set it. */\r\n    alt: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Icon;","examples":[{"name":"Example1","description":"","code":"/* Render an icon */\r\nimport React from 'react';\r\nimport { Icon } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Icon iconName=\"search\" />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Icon with custom size */\r\nimport React from 'react';\r\nimport { Icon } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Icon iconName=\"search\" width={100} height={100} />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Icon with custom colors */\r\nimport React from 'react';\r\nimport { Icon, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Icon iconName=\"search\" colors={[colors.blue]} hover={[colors.red]} />\r\n    );\r\n}"}]},{"name":"Input","description":"Input component that includes all the markup, functions and behaviors to implement any type of input field.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"type":{"type":{"name":"string"},"required":false,"description":"Type of the input. Use any of the following types: text, email, password, textarea, select, date, number, search, file.","defaultValue":{"value":"'text'","computed":false}},"maxLength":{"type":{"name":"number"},"required":false,"description":"Maximum number of characters to accept in the input.","defaultValue":{"value":"100","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":"Label to show right above the input field."},"placeholder":{"type":{"name":"string"},"required":false,"description":"Text to display as the placeholder for the input. If you set a value for placeholder but not for label, the placeholder will behave as a label on focus."},"name":{"type":{"name":"string"},"required":false,"description":"Name of the input field."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the input. It shows a static markup with the styles of an input.","defaultValue":{"value":"false","computed":false}},"counter":{"type":{"name":"bool"},"required":false,"description":"It displays a counter floating to the right, indicating the number of the remaining characters available. It is related to the maxLength value.","defaultValue":{"value":"false","computed":false}},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"Focus automatically on the field with this property. You can just use one of these per form.","defaultValue":{"value":"false","computed":false}},"clear":{"type":{"name":"bool"},"required":false,"description":"Setting this property will show an 'x' icon on the right side of the input. Clicking it will remove the value of the input field.","defaultValue":{"value":"false","computed":false}},"error":{"type":{"name":"string"},"required":false,"description":"After doing your validations outside of this component, you cand send an error string."},"valid":{"type":{"name":"bool"},"required":false,"description":"If the input value is valid after your validations, you can use this property to highlight the input in green."},"valueProp":{"type":{"name":"node"},"required":false,"description":"Use as a default value.","defaultValue":{"value":"''","computed":false}},"selectOnFocus":{"type":{"name":"bool"},"required":false,"description":"With this property set to true, the value of the input will be selected on focus.","defaultValue":{"value":"false","computed":false}},"meta":{"type":{"name":"object"},"required":false,"description":"Metadata sended by react-form."},"input":{"type":{"name":"object"},"required":false,"description":"Object sended by react-form."},"onFocus":{"type":{"name":"func"},"required":false,"description":"Function to call on focus."},"onBlur":{"type":{"name":"func"},"required":false,"description":"Function to call on blur."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call on change."},"onClear":{"type":{"name":"func"},"required":false,"description":"Function to call after clicking the 'x' icon shown by the 'clear' property."},"onRef":{"type":{"name":"func"},"required":false,"description":"Function to call when you need to call the input by a reference."},"options":{"type":{"name":"array"},"required":false,"description":"Array of objects with options in case you set the 'type' property as 'select'. Each option must have a value and a text."},"iconName":{"type":{"name":"string"},"required":false,"description":"If you want to display an icon on the left side, use any icon's name available in the library."},"theme":{"type":{"name":"string"},"required":false,"description":"Provide a theme name to change the component's look & feel. Use 'flat' to use the new theme. Ignore it to use the default theme."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Icon from '../Icon';\r\n\r\nimport colors from '../subatomic/colors';\r\n\r\n/** Input component that includes all the markup, functions and behaviors to implement any type of input field. */\r\nclass Input extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status: 'default',\r\n            value: props.valueProp ? props.valueProp : '',\r\n            touched: false\r\n        };\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.onClear = this.onClear.bind(this);\r\n        this.setAsComplete = this.setAsComplete.bind(this);\r\n    }\r\n    \r\n    componentWillMount() {\r\n        let { input, onRef } = this.props;\r\n        if (input && input.value)\r\n            this.setState({ value: input.value });\r\n            if (onRef) onRef(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        let { value } = this.state;\r\n        if (value) {\r\n            this.setAsComplete();\r\n        }\r\n    }\r\n    \r\n    componentWillReceiveProps(props) {\r\n        let { input, valueProp } = props;\r\n        if (input && input.value)\r\n            this.setState({ value: input.value });\r\n        else if (valueProp != this.state.valueProp)\r\n            this.setState({ value: valueProp });\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        let { onRef } = this.props;\r\n        if (onRef) onRef(undefined);\r\n    }\r\n    \r\n    setAsComplete() {\r\n        this.setState({ status: 'complete' });\r\n    }\r\n    \r\n    onFocus({ target }) {\r\n        const { onFocus, selectOnFocus } = this.props;\r\n        if (selectOnFocus) target.select();\r\n        this.setState({ status:'focus', touched: true });\r\n        if (onFocus) onFocus();\r\n    }\r\n    \r\n    onBlur({ target: {value} }) {\r\n        const { input, onBlur } = this.props;\r\n        this.setState({ value:value, status: value.length ? 'complete' : 'default' });\r\n        if (onBlur) onBlur(value);\r\n        if (input) input.onBlur(value);\r\n    }\r\n    \r\n    onChange({ target: {value} }) {\r\n        const { input, onChange } = this.props;\r\n        this.setState({ value:value });\r\n        if (onChange) onChange(value);\r\n        if (input) input.onBlur(value);\r\n    }\r\n    \r\n    onKeyUp({ which }) {\r\n        const { onKeyUp } = this.props;\r\n        if (onKeyUp) onKeyUp(which);\r\n    }\r\n    \r\n    onClear() {\r\n        const { input, onClear } = this.props;\r\n        this.setState({ value:'', status: 'default' });\r\n        if (onClear) onClear();\r\n        if (input) input.onBlur(value);\r\n    }\r\n    \r\n    setIconColor(status) {\r\n        let iconColors = {\r\n            default: colors.black,\r\n            focus: colors.blue,\r\n            complete: colors.black,\r\n            correct: colors.green,\r\n            error: colors.red,\r\n            disabled: colors.grey1\r\n        };\r\n        return iconColors[status];\r\n    }\r\n    \r\n    render() {\r\n        const { status, value, touched } = this.state;\r\n        const { input, classes, className, label, placeholder, counter, maxLength, type, options, name, id, style, disabled, meta, autoFocus, error, valid, clear, iconName } = this.props;\r\n        let realStatus = status;\r\n        let InputType = (type == \"textarea\" ? \"textarea\" : type == \"select\" ? \"select\" : \"input\");\r\n        if (status != 'focus') {\r\n            if (disabled)\r\n                realStatus = 'disabled';\r\n            else if ((meta && meta.error && meta.touched) || touched && error)\r\n                realStatus = 'error';\r\n            else if ((meta && meta.valid) || (touched && valid))\r\n                realStatus = 'correct';\r\n            else if (input && input.value)\r\n                realStatus = 'complete';\r\n        }\r\n        let iconColor;\r\n        if (iconName)\r\n            iconColor = this.setIconColor(realStatus);\r\n        if (disabled) {\r\n            return (\r\n                <div className={`${classes.container} ${classes.disabled} ${(!label && placeholder) && classes.push}${className ? ` ${className}` : ''}`} style={style}>\r\n                    {label && (\r\n                        <label className={`${classes.label} ${classes.left}`}>\r\n                            {label}\r\n                        </label>\r\n                    )}\r\n                    <label className={`${classes.input}${iconName ? ` ${classes.hasIcon}` : ''}`}>\r\n                        {(input && input.value) ? input.value : value ? value : placeholder}\r\n                    </label>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className={`${classes.container} ${classes[realStatus]}${(!label && placeholder) ? ` ${classes.push}` : ''}${className ? ` ${className}` : ''}`} style={style}>\r\n                {label && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.left}`}>\r\n                        {label}\r\n                    </label>\r\n                )}\r\n                {(!label && placeholder) && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.left} ${classes.placeholder}${iconName ? ` ${classes.pushHolder}` : ''}`}>\r\n                        {placeholder}\r\n                    </label>\r\n                )}\r\n                {iconName && (\r\n                    <Icon iconName={iconName} width={24} height={24} display=\"inline-block\" className={classes.icon} colors={[iconColor]} />\r\n                )}\r\n                {(counter && status == 'focus') && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.right} ${classes.counter}`}>\r\n                        {maxLength-value.length}\r\n                    </label>\r\n                )}\r\n                <div className={classes.inputWrap}>\r\n                    {type == \"select\" ? (\r\n                        <InputType\r\n                            type={type}\r\n                            name={name}\r\n                            id={id}\r\n                            className={`${classes.input} ${classes.select}${iconName ? ` ${classes.hasIcon}` : ''}${clear ? ` ${classes.hasClear}` : ''}${type == \"textarea\" ? ` ${classes.textarea}` : ''}${(value && type==\"textarea\") ? ` ${classes.expanded}` : ''}`}\r\n                            placeholder={(label && placeholder) ? placeholder : ''}\r\n                            value={(input && input.value) ? input.value : value}\r\n                            autoFocus={autoFocus}\r\n                            maxLength={maxLength}\r\n                            onFocus={this.onFocus}\r\n                            onBlur={this.onBlur}\r\n                            onChange={this.onChange}\r\n                            ref = {ref => { this.child = ref; }}\r\n                        >\r\n                            {options.map(option => (\r\n                                <option key={option.value} value={option.value}>{option.text}</option>\r\n                            ))}\r\n                        </InputType>\r\n                    ) : (\r\n                        <InputType\r\n                            type={type}\r\n                            name={name}\r\n                            id={id}\r\n                            className={`${classes.input}${iconName ? ` ${classes.hasIcon}` : ''}${clear ? ` ${classes.hasClear}` : ''}${type == \"textarea\" ? ` ${classes.textarea}` : ''}${(value && type==\"textarea\") ? ` ${classes.expanded}` : ''}`}\r\n                            placeholder={(label && placeholder) ? placeholder : ''}\r\n                            value={(input && input.value) ? input.value : value}\r\n                            autoFocus={autoFocus}\r\n                            maxLength={maxLength}\r\n                            onFocus={this.onFocus}\r\n                            onBlur={this.onBlur}\r\n                            onChange={this.onChange}\r\n                            onKeyUp={this.onKeyUp}\r\n                            ref = {ref => { this.child = ref; }}\r\n                        />\r\n                    )}\r\n                </div>\r\n                {(value && clear) && (\r\n                    <button onClick={this.onClear} className={classes.clear}><Icon iconName=\"close\" /></button>\r\n                )}\r\n                {((meta && meta.error && meta.touched) || (error && touched) && status != 'focus') && (\r\n                    <label className={`${classes.label} ${classes.error}`}>{meta ? meta.error : error}</label>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nInput.defaultProps = {\r\n    type: 'text',\r\n    counter: false,\r\n    maxLength: 100,\r\n    disabled: false,\r\n    autoFocus: false,\r\n    clear: false,\r\n    valueProp: '',\r\n    selectOnFocus: false\r\n};\r\n\r\nInput.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Type of the input. Use any of the following types: text, email, password, textarea, select, date, number, search, file. */\r\n    type: PropTypes.string,\r\n    /** Maximum number of characters to accept in the input. */\r\n    maxLength: PropTypes.number,\r\n    /** Label to show right above the input field. */\r\n    label: PropTypes.string,\r\n    /** Text to display as the placeholder for the input. If you set a value for placeholder but not for label, the placeholder will behave as a label on focus. */\r\n    placeholder: PropTypes.string,\r\n    /** Name of the input field. */\r\n    name: PropTypes.string,\r\n    /** Disable the input. It shows a static markup with the styles of an input. */\r\n    disabled: PropTypes.bool,\r\n    /** It displays a counter floating to the right, indicating the number of the remaining characters available. It is related to the maxLength value. */\r\n    counter: PropTypes.bool,\r\n    /** Focus automatically on the field with this property. You can just use one of these per form. */\r\n    autoFocus: PropTypes.bool,\r\n    /** Setting this property will show an 'x' icon on the right side of the input. Clicking it will remove the value of the input field.*/\r\n    clear: PropTypes.bool,\r\n    /** After doing your validations outside of this component, you cand send an error string. */\r\n    error: PropTypes.string,\r\n    /** If the input value is valid after your validations, you can use this property to highlight the input in green. */\r\n    valid: PropTypes.bool,\r\n    /** Use as a default value. */\r\n    valueProp: PropTypes.node,\r\n    /** With this property set to true, the value of the input will be selected on focus. */\r\n    selectOnFocus: PropTypes.bool,\r\n    /** Metadata sended by react-form. */\r\n    meta: PropTypes.object,\r\n    /** Object sended by react-form. */\r\n    input: PropTypes.object,\r\n    /** Function to call on focus. */\r\n    onFocus: PropTypes.func,\r\n    /** Function to call on blur. */\r\n    onBlur: PropTypes.func,\r\n    /** Function to call on change. */\r\n    onChange: PropTypes.func,\r\n    /** Function to call after clicking the 'x' icon shown by the 'clear' property. */\r\n    onClear: PropTypes.func,\r\n    /** Function to call when you need to call the input by a reference. */\r\n    onRef: PropTypes.func,\r\n    /** Array of objects with options in case you set the 'type' property as 'select'. Each option must have a value and a text. */\r\n    options: PropTypes.array,\r\n    /** If you want to display an icon on the left side, use any icon's name available in the library. */\r\n    iconName: PropTypes.string,\r\n    /** Provide a theme name to change the component's look & feel. Use 'flat' to use the new theme. Ignore it to use the default theme. */\r\n    theme: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Input;","examples":[{"name":"Example1","description":"","code":"/* Simple Input */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n        />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Clear Input */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            valueProp=\"Click on the 'x' icon\"\r\n            clear\r\n        />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Input with icon */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            iconName=\"search\"\r\n        />\r\n    );\r\n}"},{"name":"Example4","description":"","code":"/* Autofocus */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            autoFocus\r\n        />\r\n    );\r\n}"},{"name":"Example5","description":"","code":"/* Select value on focus */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            valueProp=\"Click on the Input to select this text\"\r\n            selectOnFocus\r\n        />\r\n    );\r\n}"},{"name":"Example6","description":"","code":"/* Display a counter */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example6() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            maxLength={50}\r\n            counter\r\n        />\r\n    );\r\n}"},{"name":"Example7","description":"","code":"/* Input with error */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example7() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Focus and blur the input to show the error\"\r\n            error=\"Input with error\"\r\n        />\r\n    );\r\n}"},{"name":"Example8","description":"","code":"/* Valid Input */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example8() {\r\n    return (\r\n        <Input\r\n            label=\"Label\"\r\n            placeholder=\"Placeholder\"\r\n            valueProp=\"Focus and blur the input to show the valid status\"\r\n            valid\r\n        />\r\n    );\r\n}"},{"name":"Example9","description":"","code":"/* Animated placeholder */\r\nimport React from 'react';\r\nimport { Input } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example9() {\r\n    return (\r\n        <Input placeholder=\"Animated placeholder\" />\r\n    );\r\n}"}]},{"name":"Label","description":"Label component with different themes. The label can trigger some actions on click.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"Select a theme for the label (currently there's just the \"default\" theme).","defaultValue":{"value":"\"default\"","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call when the label is clicked."},"onClose":{"type":{"name":"func"},"required":false,"description":"If the label receives an onClose function it will display an 'x' icon on hover that will trigger this function when clicked."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label component with different themes. The label can trigger some actions on click. */\r\nclass Label extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, className, id, style, onClose, onClick, theme } = this.props;\r\n        return (\r\n            <label className={`${classes.label} ${theme ? classes[theme] : classes.default}${onClick ? ` ${classes.cursor}` : ''}${className ? ` ${className}` : ''}`} id={id} style={style} onClick={onClick}>\r\n                {children}\r\n                {onClose && <span className={classes.close} onClick={e => {e.stopPropagation(); onClose();}} />}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n\r\nLabel.defaultProps= {\r\n    theme: \"default\"\r\n};\r\n\r\nLabel.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Select a theme for the label (currently there's just the \"default\" theme). */\r\n    theme: PropTypes.string,\r\n    /** Function to call when the label is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** If the label receives an onClose function it will display an 'x' icon on hover that will trigger this function when clicked. */\r\n    onClose: PropTypes.func,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Label;","examples":[{"name":"Example1","description":"","code":"/* Render a label */\r\nimport React from 'react';\r\nimport { Label } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Label>Label</Label>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Label with functions */\r\nimport React from 'react';\r\nimport { Label } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Label onClick={() => {console.log('clicked!');}} onClose={() => {console.log('closed!');}}>Label with functions</Label>\r\n    );\r\n}"}]},{"name":"LayerApp","description":"The LayerApp component is a wrapper for the SubHeader component that also includes a content block.\r\nIt is meant to be used as an overlay screen, in front of the main content.\r\nThere are no examples included, since the LayerApp component occupies the whole screen in first plane.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"The theme to use in the LayerApp. The options are blue and white.","defaultValue":{"value":"\"blue\"","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"This property fixes the LayerApp's header to the top of the screen.","defaultValue":{"value":"false","computed":false}},"left":{"type":{"name":"node"},"required":false,"description":"Content to display on the left of the header."},"right":{"type":{"name":"node"},"required":false,"description":"Content to display on the right of the header."},"center":{"type":{"name":"node"},"required":false,"description":"Content to display on the center of the header."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SubHeader from '../SubHeader';\r\n\r\n/**\r\n* The LayerApp component is a wrapper for the SubHeader component that also includes a content block.\r\n* It is meant to be used as an overlay screen, in front of the main content.\r\n* There are no examples included, since the LayerApp component occupies the whole screen in first plane.\r\n*/\r\nclass LayerApp extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, theme, fixed, left, right, center } = this.props;\r\n        return (\r\n            <div className={`${classes.layerApp} ${classes[theme]}`}>\r\n                <SubHeader theme={theme} left={left} right={right} center={center} fixed={fixed} />\r\n                <div className={classes.content}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLayerApp.defaultProps = {\r\n    fixed: false,\r\n    theme: \"blue\"\r\n};\r\n\r\nLayerApp.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** The theme to use in the LayerApp. The options are blue and white. */\r\n    theme: PropTypes.string,\r\n    /** This property fixes the LayerApp's header to the top of the screen. */\r\n    fixed: PropTypes.bool,\r\n    /** Content to display on the left of the header. */\r\n    left: PropTypes.node,\r\n    /** Content to display on the right of the header. */\r\n    right: PropTypes.node,\r\n    /** Content to display on the center of the header. */\r\n    center: PropTypes.node\r\n};\r\n\r\nexport default LayerApp;","examples":[]},{"name":"OrderBy","description":"The OrderBy component shows a label and a dropdown with the values to order a set of items. You have to do that ordering by receiving the OrderBy value with an onChange function.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"text":{"type":{"name":"string"},"required":false,"description":"Text to be displayed on the left."},"options":{"type":{"name":"array"},"required":true,"description":"Array with all the options to show in the dropdown."},"value":{"type":{"name":"node"},"required":false,"description":"Set a default value."},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call when the value of the dropdown changes."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** The OrderBy component shows a label and a dropdown with the values to order a set of items. You have to do that ordering by receiving the OrderBy value with an onChange function. */\r\nclass OrderBy extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n    \r\n    onChange({target: {value}}) {\r\n        const { onChange } = this.props;\r\n        if (onChange) onChange(value);\r\n    }\r\n    \r\n    render() {\r\n        const { classes, text, options, value, id, className, style } = this.props;\r\n        return (\r\n            <div className={`${classes.wrap}${className ? ` ${className}` : ''}`} id={id} style={style}>\r\n                <span className={classes.text}>{text}</span>\r\n                <select className={classes.select} value={value} onChange={this.onChange}>\r\n                    {options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.text}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nOrderBy.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Text to be displayed on the left. */\r\n    text: PropTypes.string,\r\n    /** Array with all the options to show in the dropdown. */\r\n    options: PropTypes.array.isRequired,\r\n    /** Set a default value. */\r\n    value: PropTypes.node,\r\n    /** Function to call when the value of the dropdown changes. */\r\n    onChange: PropTypes.func,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default OrderBy;","examples":[{"name":"Example1","description":"","code":"/* OrderBy */\r\nimport React from 'react';\r\nimport { OrderBy } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const options = [\r\n        {value:1, text:'Price'},\r\n        {value:2, text:'Date'},\r\n        {value:3, text:'Name'}\r\n    ];\r\n    return (\r\n        <OrderBy text=\"Order by:\" options={options} />\r\n    );\r\n}"}]},{"name":"Pager","description":"This pager allows the user to navigate between pages with 'Next' and 'Previous' buttons and numerical buttons.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"pageCount":{"type":{"name":"number"},"required":false,"description":"The total number of pages.","defaultValue":{"value":"10","computed":false}},"pageRangeDisplayed":{"type":{"name":"number"},"required":false,"description":"The number of page numbers displayed at the center, between the '...' separators.","defaultValue":{"value":"2","computed":false}},"marginPagesDisplayed":{"type":{"name":"number"},"required":false,"description":"The number of page numbers displayed on the sides of the pager.","defaultValue":{"value":"3","computed":false}},"previousLabel":{"type":{"name":"node"},"required":false,"description":"The label for the 'Previous' button.","defaultValue":{"value":"'Previous'","computed":false}},"nextLabel":{"type":{"name":"node"},"required":false,"description":"The label for the 'Next' button.","defaultValue":{"value":"'Next'","computed":false}},"onPageChange":{"type":{"name":"func"},"required":false,"description":"Function to call after clicking a button to change the page."},"initialPage":{"type":{"name":"number"},"required":false,"description":"Default page to start the Pager."},"forcePage":{"type":{"name":"number"},"required":false,"description":"Force a page change externally."},"disableInitialCallback":{"type":{"name":"bool"},"required":false,"description":"By default, a callback triggers after mounting, calling the onPageChange function. Set this to false if you don't want that to happen.","defaultValue":{"value":"false","computed":false}},"hideNumbers":{"type":{"name":"bool"},"required":false,"description":"Hide the numerical buttons, leaving just the 'Next' and 'Previous' buttons to interact with.","defaultValue":{"value":"false","computed":false}},"breakLabel":{"type":{"name":"string"},"required":false,"description":"Label for the separators.","defaultValue":{"value":"'...'","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Icon from '../Icon';\r\n\r\nimport Page from './Page';\r\nimport Break from './Break';\r\n\r\n/** This pager allows the user to navigate between pages with 'Next' and 'Previous' buttons and numerical buttons. */\r\nclass Pager extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected:props.initialPage ? props.initialPage : props.forcePage ? props.forcePage : 0\r\n        };\r\n        this.callCallback = this.callCallback.bind(this);\r\n        this.handlePrevPage = this.handlePrevPage.bind(this);\r\n        this.handleNextPage = this.handleNextPage.bind(this);\r\n        this.handlePageSelected = this.handlePageSelected.bind(this);\r\n        this.getPageElement = this.getPageElement.bind(this);\r\n        this.pagination = this.pagination.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const { initialPage, disableInitialCallback } = this.props;\r\n        if (typeof(initialPage) != 'undefined' && !disableInitialCallback) {\r\n            this.callCallback(initialPage);\r\n        }\r\n    }\r\n    \r\n    componentWillReceiveProps(props) {\r\n        if (typeof(props.forcePage) != 'undefined' && this.props.forcePage != props.forcePage) {\r\n          this.setState({selected: props.forcePage});\r\n        }\r\n    }\r\n    \r\n    callCallback(selectedItem) {\r\n        const { onPageChange } = this.props;\r\n        if (typeof(onPageChange) != 'undefined' && typeof(onPageChange) == 'function') {\r\n            onPageChange({selected: selectedItem});\r\n        }\r\n    }\r\n    \r\n    handlePrevPage(e) {\r\n        const { selected } = this.state;\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (selected > 0) {\r\n            this.handlePageSelected(selected -1, e);\r\n        }\r\n    }\r\n    \r\n    handleNextPage(e) {\r\n        const { selected } = this.state;\r\n        const { pageCount } = this.props;\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (selected < pageCount - 1) {\r\n            this.handlePageSelected(selected + 1, e);\r\n        }\r\n    }\r\n    \r\n    handlePageSelected(selected, e) {\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (this.state.selected == selected) return;\r\n        this.setState({selected});\r\n        this.callCallback(selected);\r\n    }\r\n    \r\n    getPageElement(index) {\r\n        const { selected } = this.state;\r\n        return (\r\n            <Page\r\n                key={index}\r\n                onClick={this.handlePageSelected.bind(null, index)}\r\n                selected={selected == index}\r\n                page={index+1}\r\n            />\r\n        );\r\n    }\r\n    \r\n    pagination() {\r\n        const items = [];\r\n        const { selected } = this.state;\r\n        const { pageRangeDisplayed, pageCount, marginPagesDisplayed, breakLabel } = this.props;\r\n        \r\n        if (pageCount <= pageRangeDisplayed) {\r\n            for (let index = 0; index < pageCount; index++) {\r\n                items.push(this.getPageElement(index));\r\n            }\r\n        } else {\r\n            let leftSide  = (pageRangeDisplayed / 2);\r\n            let rightSide = (pageRangeDisplayed - leftSide);\r\n            \r\n            if (selected > pageCount - pageRangeDisplayed / 2) {\r\n                rightSide = pageCount - selected;\r\n                leftSide  = pageRangeDisplayed - rightSide;\r\n            } else if (selected < pageRangeDisplayed / 2) {\r\n                leftSide  = selected;\r\n                rightSide = pageRangeDisplayed - leftSide;\r\n            }\r\n            \r\n            let index;\r\n            let page;\r\n            let breakView;\r\n            let createPage = (index) => this.getPageElement(index);\r\n            \r\n            for (index = 0; index < pageCount; index++) {\r\n                page = index+1;\r\n                \r\n                // \r\n                if (page <= marginPagesDisplayed) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if (page > pageCount - marginPagesDisplayed) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if ((index >= selected - leftSide) && (index <= selected + rightSide)) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if (breakLabel && items[items.length - 1] != breakView) {\r\n                    breakView = (\r\n                        <Break\r\n                            key={index}\r\n                            label={breakLabel}\r\n                        />\r\n                    );\r\n                    items.push(breakView);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return items;\r\n    }\r\n    \r\n    render() {\r\n        const { selected } = this.state;\r\n        const { classes, pageCount, previousLabel, nextLabel, hideNumbers, className } = this.props;\r\n        return (\r\n            <ul className={`${classes.pager}${className ? ` ${className}` : ''}`}>\r\n                <li className={`${classes.btn} ${classes.prev}${selected == 0 ? ` ${classes.disabled}` : ''}`} tabIndex=\"0\" onClick={this.handlePrevPage}>\r\n                    <Icon iconName=\"arrowDown\" colors={['#adb4bb']} /> {previousLabel}\r\n                </li>\r\n                {!hideNumbers && this.pagination()}\r\n                <li className={`${classes.btn} ${classes.next}${selected == pageCount - 1 ? ` ${classes.disabled}` : ''}`} tabIndex=\"0\" onClick={this.handleNextPage}>\r\n                    {nextLabel} <Icon iconName=\"arrowDown\" colors={['#adb4bb']} />\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nPager.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** The total number of pages. */\r\n    pageCount: PropTypes.number.isRequired,\r\n    /** The number of page numbers displayed at the center, between the '...' separators. */\r\n    pageRangeDisplayed: PropTypes.number.isRequired,\r\n    /** The number of page numbers displayed on the sides of the pager. */\r\n    marginPagesDisplayed: PropTypes.number.isRequired,\r\n    /** The label for the 'Previous' button. */\r\n    previousLabel: PropTypes.node,\r\n    /** The label for the 'Next' button. */\r\n    nextLabel: PropTypes.node,\r\n    /** Function to call after clicking a button to change the page. */\r\n    onPageChange: PropTypes.func,\r\n    /** Default page to start the Pager. */\r\n    initialPage: PropTypes.number,\r\n    /** Force a page change externally. */\r\n    forcePage: PropTypes.number,\r\n    /** By default, a callback triggers after mounting, calling the onPageChange function. Set this to false if you don't want that to happen. */\r\n    disableInitialCallback: PropTypes.bool,\r\n    /** Hide the numerical buttons, leaving just the 'Next' and 'Previous' buttons to interact with. */\r\n    hideNumbers: PropTypes.bool,\r\n    /** Label for the separators. */\r\n    breakLabel: PropTypes.string,\r\n    className: PropTypes.string\r\n};\r\n\r\nPager.defaultProps = {\r\n    pageCount: 10,\r\n    pageRangeDisplayed: 2,\r\n    marginPagesDisplayed: 3,\r\n    previousLabel: 'Previous',\r\n    nextLabel: 'Next',\r\n    breakLabel: '...',\r\n    disableInitialCallback: false,\r\n    hideNumbers: false\r\n};\r\n\r\nexport default Pager;","examples":[{"name":"Example1","description":"","code":"/* Simple pager */\r\nimport React from 'react';\r\nimport { Pager } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Pager\r\n            pageCount={30}\r\n            pageRangeDisplayed={3}\r\n            marginPagesDisplayed={2}\r\n        />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Without numbers */\r\nimport React from 'react';\r\nimport { Pager } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Pager\r\n            pageCount={5}\r\n            hideNumbers\r\n        />\r\n    );\r\n}"},{"name":"Example3","description":"","code":"/* Return the page number on change */\r\nimport React from 'react';\r\nimport { Pager } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Pager\r\n            pageCount={5}\r\n            onPageChange={(page) => {console.log(page);}}\r\n        />\r\n    );\r\n}"}]},{"name":"RangeCounter","description":"Use this component in lists with pagination. It will display information about the current page and its elements.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"min":{"type":{"name":"number"},"required":false,"description":"The number of the first item."},"max":{"type":{"name":"number"},"required":false,"description":"The number of the last item."},"symbol":{"type":{"name":"string"},"required":false,"description":"A symbol to separate the min and max numbers.","defaultValue":{"value":"' - '","computed":false}},"of":{"type":{"name":"string"},"required":false,"description":"A semantic separator between the min and max, with the total.","defaultValue":{"value":"'/'","computed":false}},"total":{"type":{"name":"number"},"required":false,"description":"The total number of elements on the whole list."},"type":{"type":{"name":"string"},"required":false,"description":"The type of items that the list is showing.","defaultValue":{"value":"''","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Use this component in lists with pagination. It will display information about the current page and its elements. */\r\nclass RangeCounter extends React.Component {\r\n    \r\n    numberWithCommas(num) {\r\n        return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n    \r\n    render() {\r\n        const { classes, min, max, symbol, total, type, of, id, className, style } = this.props;\r\n        return (\r\n            <div className={`${classes.cont}${className ? ` ${className}` : ''}`} id={id} style={style}><span className={classes.num}>{this.numberWithCommas(min)}{symbol}{this.numberWithCommas(max)}</span> {of} {this.numberWithCommas(total)} {type}</div>\r\n        );\r\n    }\r\n}\r\n\r\nRangeCounter.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** The number of the first item. */\r\n    min: PropTypes.number,\r\n    /** The number of the last item. */\r\n    max: PropTypes.number,\r\n    /** A symbol to separate the min and max numbers. */\r\n    symbol: PropTypes.string,\r\n    /** A semantic separator between the min and max, with the total. */\r\n    of: PropTypes.string,\r\n    /** The total number of elements on the whole list. */\r\n    total: PropTypes.number,\r\n    /** The type of items that the list is showing. */\r\n    type: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nRangeCounter.defaultProps = {\r\n    symbol: ' - ',\r\n    type: '',\r\n    of: '/'\r\n};\r\n\r\nexport default RangeCounter;","examples":[{"name":"Example1","description":"","code":"/* RangeCounter */\r\nimport React from 'react';\r\nimport { RangeCounter } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <RangeCounter min={20} max={40} total={100} type=\"elements\" />\r\n    );\r\n}"}]},{"name":"Row","description":"Use the Row component inside a Container. To make your grid as complex as you need, you can nest a Column inside a Row and then nest a Row inside a Column to start a new grid.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Use the Row component inside a Container. To make your grid as complex as you need, you can nest a Column inside a Row and then nest a Row inside a Column to start a new grid. */\r\nconst Row = ({ classes, children, className, id, style }) => (\r\n    <div className={`${classes.row}${className ? ` ${className}` : ''}`} style={style} id={id}>{children}</div>\r\n);\r\n\r\nRow.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Row;","examples":[{"name":"Example1","description":"","code":"/* Row */\r\nimport React from 'react';\r\nimport { Container, Row, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* Nested grid */\r\nimport React from 'react';\r\nimport { Container, Row, Column, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Container fluid style={{background:colors.grey3}}>\r\n            Container\r\n            <Row style={{background:colors.grey4}}>\r\n                Row\r\n            </Row>\r\n            <Row style={{background:colors.grey4}}>\r\n                <Column xs={{col:9}} style={{background:colors.grey5}}>\r\n                    Column\r\n                    <Row style={{background:colors.grey4}}>\r\n                        Row\r\n                    </Row>\r\n                    <Row style={{background:colors.grey4}}>\r\n                        <Column xs={{col:7}} style={{background:colors.grey5}}>\r\n                            Column\r\n                        </Column>\r\n                    </Row>\r\n                </Column>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}"}]},{"name":"SightLogo","description":"A simple component to display the Sight logo.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** A simple component to display the Sight logo. */\r\nconst SightLogo = ({ classes, style, className, id }) => (\r\n    <div className={`${classes.container}${className ? ` ${className}` : ''}`} id={id} style={style}>\r\n        <i className={classes.logo} />\r\n    </div>\r\n);\r\n\r\nSightLogo.propTypes = {\r\n    classes: PropTypes.object,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default SightLogo;","examples":[{"name":"Example1","description":"","code":"/* SightLogo */\r\nimport React from 'react';\r\nimport { SightLogo, colors } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{background:colors.blue, padding:'15px 30px 70px 30px'}}>\r\n            <SightLogo />\r\n        </div>\r\n    );\r\n}"}]},{"name":"SlideDown","description":"Component to create an accordion section. The content will be hidden by default, and shown after click.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"title":{"type":{"name":"string"},"required":false,"description":"Title of the tab."},"expanded":{"type":{"name":"bool"},"required":false,"description":"Set this as true to show the content by default.","defaultValue":{"value":"false","computed":false}},"active":{"type":{"name":"bool"},"required":false,"description":"This property will display a blue mark on the tab, in case you need to specify that something in the content is relevant to check."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Title from '../Title';\r\nimport Icon from '../Icon';\r\nimport Flexbox from '../Flexbox';\r\n\r\nimport colors from '../subatomic/colors';\r\n\r\n/** Component to create an accordion section. The content will be hidden by default, and shown after click. */\r\nclass SlideDown extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: this.props.expanded,\r\n            toggled: this.props.expanded\r\n        };\r\n        this.toggleContent = this.toggleContent.bind(this);\r\n    }\r\n\r\n    toggleContent() {\r\n        if (!this.state.expanded) {\r\n            this.setState({\r\n                expanded: true\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    toggled: true\r\n                });\r\n            }, 0);\r\n        } else {\r\n            this.setState({\r\n                toggled: false\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    expanded: false\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { expanded, toggled } = this.state;\r\n        const { classes, title, children, active } = this.props;\r\n        return (\r\n            <div>\r\n                <div className={classes.button} onClick={this.toggleContent}>\r\n                    <Flexbox display=\"flex\" justifyContent=\"between\" alignItems=\"center\">\r\n                        <Title h={4} className={active ? classes.dot : ''}>{title}</Title>\r\n                        <Icon iconName=\"arrowDown\" colors={[colors.grey6]} style={{transform:toggled ? 'rotate(180deg)' : ''}} />\r\n                    </Flexbox>\r\n                </div>\r\n                {expanded && (\r\n                    <div className={`${classes.content} ${toggled ? classes.show : classes.hide}`}>\r\n                        {children}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nSlideDown.defaultProps = {\r\n    expanded: false\r\n};\r\n\r\nSlideDown.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Title of the tab. */\r\n    title: PropTypes.string,\r\n    /** Set this as true to show the content by default. */\r\n    expanded: PropTypes.bool,\r\n    /** This property will display a blue mark on the tab, in case you need to specify that something in the content is relevant to check. */\r\n    active: PropTypes.bool\r\n};\r\n\r\nexport default SlideDown;","examples":[{"name":"Example1","description":"","code":"/* Simple SlideDown */\r\nimport React from 'react';\r\nimport { SlideDown } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <SlideDown title=\"SlideDown\">\r\n            Content of the SlideDown component\r\n        </SlideDown>\r\n    );\r\n}"}]},{"name":"SubHeader","description":"Component to display a Header with content to the left, right and center.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"The theme to use in the SubHeader. The options are blue and white.","defaultValue":{"value":"\"blue\"","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"This property fixes the SubHeader to the top of the screen.","defaultValue":{"value":"false","computed":false}},"left":{"type":{"name":"node"},"required":false,"description":"Content to display on the left."},"right":{"type":{"name":"node"},"required":false,"description":"Content to display on the right."},"center":{"type":{"name":"node"},"required":false,"description":"Content to display on the center."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Flexbox from '../Flexbox';\r\n\r\n/** Component to display a Header with content to the left, right and center. */\r\nclass SubHeader extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, theme, fixed, left, right, center } = this.props;\r\n        return (\r\n            <div className={classes.wrapper}>\r\n                <div className={`${classes.subHeader}${theme ? ` ${classes[theme]}` : classes.blue}${fixed ? ` ${classes.fixed}` : ''}`}>\r\n                    {left && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.left}>{left}</Flexbox>}\r\n                    {right && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.right}>{right}</Flexbox>}\r\n                    {center && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.center}>{center}</Flexbox>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSubHeader.defaultProps = {\r\n    fixed: false,\r\n    theme: \"blue\"\r\n};\r\n\r\nSubHeader.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** The theme to use in the SubHeader. The options are blue and white. */\r\n    theme: PropTypes.string,\r\n    /** This property fixes the SubHeader to the top of the screen. */\r\n    fixed: PropTypes.bool,\r\n    /** Content to display on the left. */\r\n    left: PropTypes.node,\r\n    /** Content to display on the right. */\r\n    right: PropTypes.node,\r\n    /** Content to display on the center. */\r\n    center: PropTypes.node\r\n};\r\n\r\nexport default SubHeader;","examples":[{"name":"Example1","description":"","code":"/* Blue theme */\r\nimport React from 'react';\r\nimport { SubHeader } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <SubHeader left=\"Left\" center=\"Center\" right=\"Right\" />\r\n    );\r\n}"},{"name":"Example2","description":"","code":"/* White theme */\r\nimport React from 'react';\r\nimport { SubHeader } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <SubHeader theme=\"white\" left=\"Left\" center=\"Center\" right=\"Right\" />\r\n    );\r\n}"}]},{"name":"SwitchGroup","description":"The SwitchGroup component will display a group of buttons that behave as radio buttons.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"buttons":{"type":{"name":"array"},"required":false,"description":"Array of objects with a text and a secondary text if necessary."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call after clicking any button."},"selected":{"type":{"name":"number"},"required":false,"description":"The default selected button."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Flexbox from '../Flexbox';\r\n\r\n/** The SwitchGroup component will display a group of buttons that behave as radio buttons. */\r\nclass SwitchGroup extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: props.selected ? props.selected : 0\r\n        };\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n    \r\n    onClick(button, index) {\r\n        const { onClick } = this.props;\r\n        this.setState({\r\n            selected: index\r\n        });\r\n        if (onClick)\r\n            onClick(button, index);\r\n    }\r\n    \r\n    render() {\r\n        const { selected } = this.state;\r\n        const { classes, buttons } = this.props;\r\n        return (\r\n            <Flexbox display=\"flex\">\r\n                {buttons.map((button, index) => {\r\n                    return (\r\n                        <button\r\n                            key={button.text}\r\n                            className={`${classes.button}${selected == index ? ` ${classes.active}` : ''}`}\r\n                            onClick={() => {this.onClick(button, index);}}>\r\n                            {button.text}{button.sec ? <span className={classes.sec}>{button.sec}</span> : ''}\r\n                        </button>\r\n                    );\r\n                })}\r\n            </Flexbox>\r\n        );\r\n    }\r\n}\r\n\r\nSwitchGroup.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Array of objects with a text and a secondary text if necessary. */\r\n    buttons: PropTypes.array,\r\n    /** Function to call after clicking any button. */\r\n    onClick: PropTypes.func,\r\n    /** The default selected button. */\r\n    selected: PropTypes.number\r\n};\r\n\r\nexport default SwitchGroup;","examples":[{"name":"Example1","description":"","code":"/* Simple SwitchGroup */\r\nimport React from 'react';\r\nimport { SwitchGroup } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    const items = [\r\n        { text:'Button 1', sec:'(10)' },\r\n        { text:'Button 2', sec:'(5)' },\r\n        { text:'Button 3', sec:'(35)' }\r\n    ];\r\n    return (\r\n        <SwitchGroup buttons={items} />\r\n    );\r\n}"}]},{"name":"Title","description":"Component to display heading tags with its coresponding style.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"h":{"type":{"name":"number"},"required":true,"description":"A number with the heading level, between 1 and 6."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Component to display heading tags with its coresponding style. */\r\nclass Title extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, h, id, className, style } = this.props;\r\n        let Heading;\r\n        if (h && h<=6 && h>=1)\r\n            Heading = `h${h}`;\r\n        else\r\n            Heading = 'h1';\r\n        return (\r\n            <Heading id={id} className={`${classes.title} ${classes[Heading]}${className ? ` ${className}` : ''}`} style={style}>\r\n                {children}\r\n            </Heading>\r\n        );\r\n    }\r\n}\r\n\r\nTitle.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** A number with the heading level, between 1 and 6. */\r\n    h: PropTypes.number.isRequired,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Title;","examples":[{"name":"Example1","description":"","code":"/* Title with h1 */\r\nimport React from 'react';\r\nimport { Title } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Title h={1}>Title</Title>\r\n    );\r\n}"}]},{"name":"TourTip","description":"This component displays a tooltip in a defined direction and alignment relative to a specified element. To make it work both, the target and the TourTip component, must be wrapped inside a 'relative' container.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"direction":{"type":{"name":"string"},"required":false,"description":"Side of the target where the TourTip will be displayed.","defaultValue":{"value":"\"left\"","computed":false}},"align":{"type":{"name":"string"},"required":false,"description":"Alignment of the TourTip in the specified direction.","defaultValue":{"value":"\"center\"","computed":false}},"target":{"type":{"name":"string"},"required":true,"description":"The id of the target item. The target item must be inside a container with the display property as 'relative'."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport $ from 'jquery';\r\n\r\n/** This component displays a tooltip in a defined direction and alignment relative to a specified element. To make it work both, the target and the TourTip component, must be wrapped inside a 'relative' container. */\r\nclass TourTip extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: {}\r\n        };\r\n        this.attachToTarget = this.attachToTarget.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const setPosition = () => {\r\n            this.setState({\r\n                position: this.attachToTarget()\r\n            });\r\n        };\r\n        $(document).ready(setPosition);\r\n        window.addEventListener(\"resize\", setPosition);\r\n    }\r\n    \r\n    attachToTarget() {\r\n        const { target, direction, align } = this.props;\r\n        const item = document.getElementById(target);\r\n        const itemRect = item.getBoundingClientRect();\r\n        const offsetLeft = item.offsetLeft;\r\n        const offsetTop = item.offsetTop;\r\n        const tip = ReactDOM.findDOMNode(this);\r\n        const tipRect = tip.getBoundingClientRect();\r\n        let position = {};\r\n        if (direction == \"left\") {\r\n            position.left = offsetLeft - tipRect.width - 5;\r\n            if (align == \"top\")\r\n                position.top = offsetTop;\r\n            else if (align == \"bottom\")\r\n                position.top = offsetTop + itemRect.height - tipRect.height;\r\n            else\r\n                position.top = offsetTop + (itemRect.height/2) - (tipRect.height/2);\r\n        } else if (direction == \"right\") {\r\n            position.left = offsetLeft + itemRect.width + 5;\r\n            if (align == \"top\")\r\n                position.top = offsetTop;\r\n            else if (align == \"bottom\")\r\n                position.top = offsetTop + itemRect.height - tipRect.height;\r\n            else\r\n                position.top = offsetTop + (itemRect.height/2) - (tipRect.height/2);\r\n        } else if (direction == \"up\") {\r\n            if (align == \"left\")\r\n                position.left = offsetLeft;\r\n            else if (align == \"right\")\r\n                position.left = offsetLeft + itemRect.width -tipRect.width;\r\n            else\r\n                position.left = offsetLeft + (itemRect.width/2) - (tipRect.width/2);\r\n            position.top = offsetTop - tipRect.height - 5;\r\n        } else if (direction == \"down\") {\r\n            if (align == \"left\")\r\n                position.left = offsetLeft;\r\n            else if (align == \"right\")\r\n                position.left = offsetLeft + itemRect.width -tipRect.width;\r\n            else\r\n                position.left = offsetLeft + (itemRect.width/2) - (tipRect.width/2);\r\n            position.top = offsetTop + itemRect.height + 5;\r\n        }\r\n        return position;\r\n    }\r\n    \r\n    render() {\r\n        const { position } = this.state;\r\n        const { classes, children, direction, id, className } = this.props;\r\n        return (\r\n            <div ref={ref => { this.self = ref; }} className={`${classes.tip} ${classes[direction]}${className ? ` ${className}` : ''}`} id={id} style={position}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nTourTip.defaultProps = {\r\n    direction: \"left\",\r\n    align: \"center\"\r\n};\r\n\r\nTourTip.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Side of the target where the TourTip will be displayed. */\r\n    direction: PropTypes.string.isRequired,\r\n    /** Alignment of the TourTip in the specified direction. */\r\n    align: PropTypes.string.isRequired,\r\n    /** The id of the target item. The target item must be inside a container with the display property as 'relative'. */\r\n    target: PropTypes.string.isRequired,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default TourTip;","examples":[{"name":"Example1","description":"","code":"/* TourTip */\r\nimport React from 'react';\r\nimport { TourTip } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{position:'relative'}}>\r\n            <div id=\"target\" style={{width:100, height:100, background:'#f7f7f7', display:'flex', textAlign:'center', alignItems:'center'}}>Some content</div>\r\n            <TourTip target=\"target\" direction=\"right\" align=\"center\">TourTip</TourTip>\r\n        </div>\r\n    );\r\n}"}]},{"name":"Visible","description":"Shows the content on the specified window size.","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"bool"},"required":false,"description":"Apply in extra small window size."},"sm":{"type":{"name":"bool"},"required":false,"description":"Apply in small window size."},"md":{"type":{"name":"bool"},"required":false,"description":"Apply in medium window size."},"lg":{"type":{"name":"bool"},"required":false,"description":"Apply in large window size."}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport grid from '../subatomic/grid';\r\n\r\n/** Shows the content on the specified window size. */\r\nclass Visible extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 0\r\n        };\r\n        this.getDimensions = this.getDimensions.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getDimensions();\r\n        window.addEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this.getDimensions();\r\n        window.removeEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    getDimensions() {\r\n        const width = window.innerWidth;\r\n        this.setState({\r\n            width\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { width } = this.state;\r\n        const { children, xs, sm, md, lg} = this.props;\r\n        if (\r\n            ((width >= grid.xs && width < grid.sm) && xs) ||\r\n            ((width >= grid.sm && width < grid.md) && sm) ||\r\n            ((width >= grid.md && width < grid.lg) && md) ||\r\n            ((width >= grid.lg) && lg)\r\n        ) {\r\n            return <span>{children}</span>;\r\n        } else {\r\n            return <span />;\r\n        }\r\n    }\r\n}\r\n\r\nVisible.propTypes = {\r\n    children: PropTypes.node,\r\n    /** Apply in extra small window size. */\r\n    xs: PropTypes.bool,\r\n    /** Apply in small window size. */\r\n    sm: PropTypes.bool,\r\n    /** Apply in medium window size. */\r\n    md: PropTypes.bool,\r\n    /** Apply in large window size. */\r\n    lg: PropTypes.bool\r\n};\r\n\r\nexport default Visible;","examples":[{"name":"Example1","description":"","code":"/* Show content in medium window size */\r\nimport React from 'react';\r\nimport { Visible } from '@occmundial/occ-atomic';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Visible md>Content</Visible>\r\n    );\r\n}"}]}];