module.exports = [{"name":"Avatar","description":"The Avatar component shows a rounded avatar with a profile picture, a gender icon or the first two capital letters of a name.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"photo":{"type":{"name":"string"},"required":false,"description":"A url to show a photo as the avatar"},"gender":{"type":{"name":"string"},"required":false,"description":"Use the values 'm' or 'f' to show a default avatar with an icon representing the gender"},"name":{"type":{"name":"string"},"required":false,"description":"Pass a name to show two initials"},"size":{"type":{"name":"number"},"required":false,"description":"The size of the avatar","defaultValue":{"value":"70","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarContent from './AvatarContent';\r\n\r\n/** The Avatar component shows a rounded avatar with a profile picture, a gender icon or the first two capital letters of a name. */\r\nclass Avatar extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, photo, gender, name, size, id, className, style } = this.props;\r\n        return (\r\n            <div id={id} className={`${classes.circle}${className ? ` ${className}` : ''}`} style={style}>\r\n                <AvatarContent photo={photo} gender={gender} name={name} size={size} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAvatar.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** A url to show a photo as the avatar */\r\n    photo: PropTypes.string,\r\n    /** Use the values 'm' or 'f' to show a default avatar with an icon representing the gender */\r\n    gender: PropTypes.string,\r\n    /** Pass a name to show two initials */\r\n    name: PropTypes.string,\r\n    /** The size of the avatar */\r\n    size: PropTypes.number,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nAvatar.defaultProps = {\r\n    size: 70\r\n};\r\n\r\nexport default Avatar;","examples":[{"name":"Example1","description":"","code":"import React from 'react';\r\nimport { Avatar } from 'r12-common';\r\n\r\n/* Avatar with photo */\r\nexport default function Example1() {\r\n    return <Avatar photo=\"http://placehold.it/70x70\" />\r\n}"},{"name":"Example2","description":"","code":"import React from 'react';\r\nimport { Avatar } from 'r12-common';\r\n\r\n/* Avatar with gender icon */\r\nexport default function Example2() {\r\n    return <Avatar gender=\"f\" />\r\n}"},{"name":"Example3","description":"","code":"import React from 'react';\r\nimport { Avatar } from 'r12-common';\r\n\r\n/* Avatar with capital letters */\r\nexport default function Example3() {\r\n    return <Avatar name=\"John Doe\" />\r\n}"},{"name":"Example4","description":"","code":"import React from 'react';\r\nimport { Avatar } from 'r12-common';\r\n\r\n/* Avatar with custom size */\r\nexport default function Example4() {\r\n    return <Avatar name=\"John Doe\" size={40} />\r\n}"}]},{"name":"Button","description":"A flexible button component, with four pre-stablished themes.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"string"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"There are four themes available: main, secondary, blue, flat.","defaultValue":{"value":"\"main\"","computed":false}},"size":{"type":{"name":"string"},"required":false,"description":"The button has three different sizes: sm, md, lg.","defaultValue":{"value":"\"sm\"","computed":false}},"block":{"type":{"name":"bool"},"required":false,"description":"The block property lets the button expand to ocupy the whole width of its parent.","defaultValue":{"value":"false","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"It disables the button and shows it with the proper theme.","defaultValue":{"value":"false","computed":false}},"icon":{"type":{"name":"string"},"required":false,"description":"Use the name of any of the icons available in the library."},"loading":{"type":{"name":"bool"},"required":false,"description":"The loading property disables the button and shows a loading icon spinning."},"onClick":{"type":{"name":"func"},"required":false,"description":"The function to call when the button is clicked."},"href":{"type":{"name":"string"},"required":false,"description":"Optionally, you can set the href property and use it like a link."},"target":{"type":{"name":"string"},"required":false,"description":"If you use the href property, you can also define the target."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** A flexible button component, with four pre-stablished themes. */\r\nclass Button extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, className, children, id, href, target, onClick, theme, size, block, disabled, icon, style, loading } = this.props;\r\n        let classNames=classes.btn;\r\n        if (theme) classNames += ` ${classes[theme]}`;\r\n        if (loading) classNames += ` ${classes.loading}`;\r\n        if (disabled) classNames += ` ${classes.disabled}`;\r\n        if (size == \"md\" || size == \"lg\") classNames += ` ${classes[size]}`;\r\n        if (block) classNames += ` ${classes.block}`;\r\n        if (className) classNames += ` ${className}`;\r\n        if (href) {\r\n            return (\r\n                <a\r\n                    className={classNames}\r\n                    href={disabled ? href : ''}\r\n                    target={target ? target : ''}\r\n                    onClick={!disabled && onClick}\r\n                    id={id}\r\n                    style={style}>\r\n                    <span className={classes.cont}>\r\n                        {icon ? <i className={classes.icon} /> : ''}\r\n                        {children}\r\n                    </span>\r\n                    {loading && <span className={classes.loadCont}>\r\n                        <i className={classes.loadIcon} />\r\n                    </span>}\r\n                </a>\r\n            );\r\n        } else {\r\n            return (\r\n                <button\r\n                    className={classNames}\r\n                    onClick={!disabled && onClick}\r\n                    id={id}\r\n                    style={style}>\r\n                    <span className={classes.cont}>\r\n                        {icon ? <i className={classes.icon} /> : ''}\r\n                        {children}\r\n                    </span>\r\n                    {loading && <span className={classes.loadCont}>\r\n                        <i className={classes.loadIcon} />\r\n                    </span>}\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nButton.defaultProps = {\r\n    theme: \"main\",\r\n    size: \"sm\",\r\n    block: false,\r\n    disabled: false\r\n};\r\n\r\nButton.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.string,\r\n    /** There are four themes available: main, secondary, blue, flat. */\r\n    theme: PropTypes.string,\r\n    /** The button has three different sizes: sm, md, lg. */\r\n    size: PropTypes.string,\r\n    /** The block property lets the button expand to ocupy the whole width of its parent. */\r\n    block: PropTypes.bool,\r\n    /** It disables the button and shows it with the proper theme. */\r\n    disabled: PropTypes.bool,\r\n    /** Use the name of any of the icons available in the library. */\r\n    icon: PropTypes.string,\r\n    /** The loading property disables the button and shows a loading icon spinning. */\r\n    loading: PropTypes.bool,\r\n    /** The function to call when the button is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Optionally, you can set the href property and use it like a link. */\r\n    href: PropTypes.string,\r\n    /** If you use the href property, you can also define the target. */\r\n    target: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Button;","examples":[{"name":"Example1","description":"","code":"import React from 'react';\r\nimport { Button } from 'r12-common';\r\n\r\n/* Themes */\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Button theme=\"main\">Main</Button>\r\n            <Button theme=\"secondary\">Secondary</Button>\r\n            <Button theme=\"blue\">Blue</Button>\r\n            <Button theme=\"main\">Flat</Button>\r\n        </div>\r\n    ) \r\n}"},{"name":"Example2","description":"","code":"import React from 'react';\r\nimport { Button } from 'r12-common';\r\n\r\n/* Sizes */\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Button size=\"sm\">Small</Button>&nbsp;\r\n            <Button size=\"md\">Medium</Button>&nbsp;\r\n            <Button size=\"lg\">Large</Button>\r\n        </div>\r\n    ) \r\n}"}]},{"name":"ButtonAlign","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"object"},"required":false,"description":""},"size":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ButtonAlign extends React.Component {\r\n    \r\n    render() {\r\n        \r\n        const { classes, children, size } = this.props;\r\n        return (\r\n            <div className={size ? classes[size] : classes.sm}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nButtonAlign.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.object,\r\n    size: PropTypes.string\r\n};\r\n\r\nexport default ButtonAlign;","examples":[]},{"name":"Card","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"noPadding":{"type":{"name":"bool"},"required":false,"description":""},"shadow":{"type":{"name":"number"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Card extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, noPadding, shadow, className, style, id } = this.props;\r\n        return (\r\n            <div id={id} className={`${!noPadding ? classes.card : classes.cardNoPadding}${shadow ? ` ${classes[`shadow${shadow}`]}` : ''}${className ? ` ${className}` : ''}`} style={style}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCard.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    className: PropTypes.string,\r\n    noPadding: PropTypes.bool,\r\n    shadow: PropTypes.number,\r\n    style: PropTypes.object,\r\n    id: PropTypes.string\r\n};\r\n\r\nexport default Card;","examples":[]},{"name":"Check","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"input":{"type":{"name":"object"},"required":false,"description":""},"value":{"type":{"name":"bool"},"required":false,"description":""},"onChange":{"type":{"name":"func"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":""},"label":{"type":{"name":"string"},"required":false,"description":""},"right":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Check extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.input ? props.input.value : props.value \r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        const { input, value } = props;\r\n        if (input && input.value != this.state.value)\r\n            this.setState({ value: input.value });\r\n        else if (value && this.state.value != value)\r\n            this.setState({ value });\r\n        else if(value != this.state.value)\r\n            this.setState({ value });\r\n    }\r\n\r\n    toggle() {\r\n        const { input, onChange, id, disabled } = this.props;\r\n        if (!disabled) {\r\n            let value = !this.state.value;\r\n            this.setState({ value });\r\n            if (input) input.onBlur(value);\r\n            if (onChange) onChange(value, id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.state;\r\n        const { classes, input, label, right, disabled, id, className, style } = this.props;\r\n        let state = input && input.value ? input.value : value;\r\n        return (\r\n            <div\r\n                id={id}\r\n                className={`${classes.cont}${state ? ` ${classes.active}` : ''}${disabled ? ` ${classes.disabled}` : ''}${className ? ` ${className}` : ''}`}\r\n                tabIndex={0}\r\n                onClick={this.toggle}\r\n                style={style}>\r\n                <div className={classes.check} />\r\n                {label && <span className={classes.label}>{label}</span>}\r\n                {right && <span className={classes.right}>{right}</span>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCheck.propTypes = {\r\n    classes: PropTypes.object,\r\n    input: PropTypes.object,\r\n    value: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    id: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    right: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Check;","examples":[]},{"name":"Icon","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""},"alt":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Icon extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, className, style, id, onClick, alt } = this.props;\r\n        const IconType = onClick ? 'button' : 'span';\r\n        return (\r\n            <IconType id={id} className={`${classes.icon}${onClick ? ` ${classes.click}` : ''}${className ? ` ${className}` : ''}`} style={style} onClick={onClick} alt={alt} />\r\n        );\r\n    }\r\n}\r\n\r\nIcon.propTypes = {\r\n    classes: PropTypes.object,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    style: PropTypes.object,\r\n    onClick: PropTypes.func,\r\n    alt: PropTypes.string\r\n};\r\n\r\nexport default Icon;","examples":[]},{"name":"Label","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""},"onClose":{"type":{"name":"func"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"default\"","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Label extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, className, id, style, onClose, onClick, theme } = this.props;\r\n        return (\r\n            <label className={`${classes.label} ${theme ? classes[theme] : classes.default}${onClick ? ` ${classes.cursor}` : ''}${className ? ` ${className}` : ''}`} id={id} style={style} onClick={onClick}>\r\n                {children}\r\n                {onClose && <span className={classes.close} onClick={e => {e.stopPropagation(); onClose();}} />}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n\r\nLabel.defaultProps= {\r\n    theme: \"default\"\r\n};\r\n\r\nLabel.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    style: PropTypes.object,\r\n    onClose: PropTypes.func,\r\n    onClick: PropTypes.func,\r\n    theme: PropTypes.string\r\n};\r\n\r\nexport default Label;","examples":[]},{"name":"OrderBy","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"text":{"type":{"name":"string"},"required":false,"description":""},"options":{"type":{"name":"array"},"required":true,"description":""},"value":{"type":{"name":"node"},"required":false,"description":""},"onChange":{"type":{"name":"func"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass OrderBy extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n    \r\n    onChange({target: {value}}) {\r\n        const { onChange } = this.props;\r\n        if (onChange) onChange(value);\r\n    }\r\n    \r\n    render() {\r\n        const { classes, text, options, value } = this.props;\r\n        return (\r\n            <div className={classes.wrap}>\r\n                <span className={classes.text}>{text}</span>\r\n                <select className={classes.select} value={value} onChange={this.onChange}>\r\n                    {options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.text}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nOrderBy.propTypes = {\r\n    classes: PropTypes.object,\r\n    text: PropTypes.string,\r\n    options: PropTypes.array.isRequired,\r\n    value: PropTypes.node,\r\n    onChange: PropTypes.func\r\n};\r\n\r\nexport default OrderBy;","examples":[]},{"name":"RangeCounter","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"min":{"type":{"name":"number"},"required":false,"description":""},"max":{"type":{"name":"number"},"required":false,"description":""},"symbol":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"' - '","computed":false}},"total":{"type":{"name":"number"},"required":false,"description":""},"type":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"of":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'/'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass RangeCounter extends React.Component {\r\n    \r\n    numberWithCommas(num) {\r\n        return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n    \r\n    render() {\r\n        const { classes, min, max, symbol, total, type, of } = this.props;\r\n        return (\r\n            <div className={classes.cont}><span className={classes.num}>{this.numberWithCommas(min)}{symbol}{this.numberWithCommas(max)}</span> {of} {this.numberWithCommas(total)} {type}</div>\r\n        );\r\n    }\r\n}\r\n\r\nRangeCounter.propTypes = {\r\n    classes: PropTypes.object,\r\n    min: PropTypes.number,\r\n    max: PropTypes.number,\r\n    symbol: PropTypes.string,\r\n    total: PropTypes.number,\r\n    type: PropTypes.string,\r\n    of: PropTypes.string\r\n};\r\n\r\nRangeCounter.defaultProps = {\r\n    symbol: ' - ',\r\n    type: '',\r\n    of: '/'\r\n};\r\n\r\nexport default RangeCounter;","examples":[]},{"name":"SightLogo","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SightLogo = ({ classes, style }) => (\r\n    <div className={classes.container} style={style}>\r\n        <i className={classes.logo} />\r\n    </div>\r\n);\r\n\r\nSightLogo.propTypes = {\r\n    classes: PropTypes.object,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default SightLogo;","examples":[]},{"name":"Title","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"h":{"type":{"name":"number"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Title extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, h, id, className, style } = this.props;\r\n        let Heading;\r\n        if (h && h<=6 && h>=1)\r\n            Heading = `h${h}`;\r\n        else\r\n            Heading = 'h1';\r\n        return (\r\n            <Heading id={id} className={`${classes.title} ${classes[Heading]}${className ? ` ${className}` : ''}`} style={style}>\r\n                {children}\r\n            </Heading>\r\n        );\r\n    }\r\n}\r\n\r\nTitle.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    h: PropTypes.number,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Title;","examples":[]},{"name":"TourTip","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"direction":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"left\"","computed":false}},"align":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"center\"","computed":false}},"target":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport $ from 'jquery';\r\n\r\nclass TourTip extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: {}\r\n        };\r\n        this.attachToTarget = this.attachToTarget.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const setPosition = () => {\r\n            this.setState({\r\n                position: this.attachToTarget()\r\n            });\r\n        };\r\n        $(document).ready(setPosition);\r\n        window.addEventListener(\"resize\", setPosition);\r\n    }\r\n    \r\n    attachToTarget() {\r\n        const { target, direction, align } = this.props;\r\n        const item = document.getElementById(target);\r\n        const itemRect = item.getBoundingClientRect();\r\n        const offsetLeft = item.offsetLeft;\r\n        const offsetTop = item.offsetTop;\r\n        const tip = ReactDOM.findDOMNode(this);\r\n        const tipRect = tip.getBoundingClientRect();\r\n        let position = {};\r\n        if (direction == \"left\") {\r\n            position.left = offsetLeft - tipRect.width - 5;\r\n            if (align == \"top\")\r\n                position.top = offsetTop;\r\n            else if (align == \"bottom\")\r\n                position.top = offsetTop + itemRect.height - tipRect.height;\r\n            else\r\n                position.top = offsetTop + (itemRect.height/2) - (tipRect.height/2);\r\n        } else if (direction == \"right\") {\r\n            position.left = offsetLeft + itemRect.width + 5;\r\n            if (align == \"top\")\r\n                position.top = offsetTop;\r\n            else if (align == \"bottom\")\r\n                position.top = offsetTop + itemRect.height - tipRect.height;\r\n            else\r\n                position.top = offsetTop + (itemRect.height/2) - (tipRect.height/2);\r\n        } else if (direction == \"up\") {\r\n            if (align == \"left\")\r\n                position.left = offsetLeft;\r\n            else if (align == \"right\")\r\n                position.left = offsetLeft + itemRect.width -tipRect.width;\r\n            else\r\n                position.left = offsetLeft + (itemRect.width/2) - (tipRect.width/2);\r\n            position.top = offsetTop - tipRect.height - 5;\r\n        } else if (direction == \"down\") {\r\n            if (align == \"left\")\r\n                position.left = offsetLeft;\r\n            else if (align == \"right\")\r\n                position.left = offsetLeft + itemRect.width -tipRect.width;\r\n            else\r\n                position.left = offsetLeft + (itemRect.width/2) - (tipRect.width/2);\r\n            position.top = offsetTop + itemRect.height + 5;\r\n        }\r\n        return position;\r\n    }\r\n    \r\n    render() {\r\n        const { position } = this.state;\r\n        const { classes, children, direction, align } = this.props;\r\n        return (\r\n            <div ref={ref => { this.self = ref; }} className={`${classes.tip} ${classes[direction]}`} style={position}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nTourTip.defaultProps = {\r\n    direction: \"left\",\r\n    align: \"center\"\r\n};\r\n\r\nTourTip.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    direction: PropTypes.string,\r\n    align: PropTypes.string,\r\n    target: PropTypes.string\r\n};\r\n\r\nexport default TourTip;","examples":[]}]