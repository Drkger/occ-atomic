module.exports = [{"name":"Autocomplete","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"inputProps":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{}","computed":false}},"droplistProps":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{}","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":""},"onFocus":{"type":{"name":"func"},"required":false,"description":""},"onBlur":{"type":{"name":"func"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""},"stackLabels":{"type":{"name":"bool"},"required":false,"description":""},"limit":{"type":{"name":"number"},"required":false,"description":""},"limitPlaceholder":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\n\r\nimport Input from '../Input';\r\nimport Droplist from '../Droplist';\r\nimport Label from '../Label';\r\n\r\nclass Autocomplete extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.inputProps.valueProp ? props.inputProps.valueProp : '',\r\n            focus: false,\r\n            labels: []\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.addLabel = this.addLabel.bind(this);\r\n        this.removeLabel = this.removeLabel.bind(this);\r\n        this.removeSelected = this.removeSelected.bind(this);\r\n        this.labels = [];\r\n    }\r\n    \r\n    onChange(value) {\r\n        const { onChange } = this.props;\r\n        this.setState({\r\n            value, focus: true\r\n        });\r\n        if (onChange) onChange(value);\r\n    }\r\n    \r\n    onFocus() {\r\n        const { onFocus } = this.props;\r\n        this.setState({\r\n            focus: true\r\n        });\r\n        if (onFocus) onFocus();\r\n    }\r\n    \r\n    onBlur() {\r\n        const { onBlur } = this.props;\r\n        setTimeout(() => {\r\n            this.setState({\r\n                focus: false\r\n            });\r\n        }, 200);\r\n        if (onBlur) onBlur();\r\n    }\r\n    \r\n    onClick(item) {\r\n        const { onClick, onChange, droplistProps, stackLabels } = this.props;\r\n        const child = this.child;\r\n        if (stackLabels) {\r\n            this.child.onClear();\r\n            this.setState({\r\n                value: ''\r\n            });\r\n            this.child.child.focus();\r\n            this.addLabel(item);\r\n        } else {\r\n            this.setState({\r\n                value: item[droplistProps.itemTextKey], focus: false\r\n            });\r\n            if (onChange) onChange(item[droplistProps.itemTextKey]);\r\n        }\r\n        if (onClick) onClick(stackLabels ? this.labels : item);\r\n    }\r\n    \r\n    addLabel(item) {\r\n        this.labels.push(item);\r\n        this.setState({labels: this.labels});\r\n    }\r\n\r\n    removeLabel(item) {\r\n        const { droplistProps, onClick } = this.props;\r\n        let pos = this.labels.map(label => { return label[droplistProps.itemIdKey];}).indexOf(item[droplistProps.itemIdKey]);\r\n        this.labels.splice(pos, 1);\r\n        this.setState({labels: this.labels});\r\n        if (onClick) onClick(this.labels);\r\n    }\r\n    \r\n    removeSelected() {\r\n        const { labels } = this.state;\r\n        const { droplistProps } = this.props;\r\n        let cleanItems = [];\r\n        if (droplistProps.groups) {\r\n            droplistProps.items.map(group => {\r\n                let cleanGroup = group[droplistProps.groupItemsKey].filter(item => {\r\n                    const inLabels = labels.filter(label => {\r\n                        return label[droplistProps.itemIdKey] == item[droplistProps.itemIdKey];\r\n                    });\r\n                    return !inLabels.length;\r\n                });\r\n                const modifiedGroup = Object.assign({}, group);\r\n                modifiedGroup[droplistProps.groupItemsKey] = cleanGroup;\r\n                if (cleanGroup.length) cleanItems.push(modifiedGroup);\r\n            });\r\n        } else {\r\n            cleanItems = droplistProps.items.filter(item => {\r\n                const inLabels = labels.filter(label => {\r\n                    return label[droplistProps.itemIdKey] == item[droplistProps.itemIdKey];\r\n                });\r\n                return !inLabels.length;\r\n            });\r\n        }\r\n        return cleanItems;\r\n    }\r\n    \r\n    render() {\r\n        const { value, focus, labels } = this.state;\r\n        const { classes, id, inputProps, droplistProps, onClick, stackLabels, limit, limitPlaceholder, style } = this.props;\r\n        const cleanItems = this.removeSelected();\r\n        return (\r\n            <div className={classes.autoComplete} id={id} style={style}>\r\n                <Input\r\n                    onRef={ref => { this.child = ref; }}\r\n                    id={inputProps.id}\r\n                    type={inputProps.type}\r\n                    name={inputProps.name}\r\n                    label={inputProps.label}\r\n                    placeholder={((stackLabels && limit) && this.labels.length >= limit) ? limitPlaceholder : inputProps.placeholder}\r\n                    onChange={this.onChange}\r\n                    onFocus={this.onFocus}\r\n                    onBlur={this.onBlur}\r\n                    selectOnFocus={inputProps.selectOnFocus}\r\n                    clear={inputProps.clear}\r\n                    disabled={(stackLabels && limit) && this.labels.length >= limit}\r\n                    valueProp={value}\r\n                    iconName={inputProps.iconName}\r\n                    className={`${classes.input}${inputProps.className ? ` ${inputProps.className}` : ''}`} />\r\n                {(value && focus) && (\r\n                    <Droplist\r\n                        items={cleanItems}\r\n                        groups={droplistProps.groups}\r\n                        groupNameKey={droplistProps.groupNameKey}\r\n                        groupIdKey={droplistProps.groupIdKey}\r\n                        groupItemsKey={droplistProps.groupItemsKey}\r\n                        itemTextKey={droplistProps.itemTextKey}\r\n                        itemTextRightKey={droplistProps.itemTextRightKey}\r\n                        itemIdKey={droplistProps.itemIdKey}\r\n                        term={value}\r\n                        onClick={this.onClick}\r\n                        className={`${classes.droplist}${droplistProps.className ? ` ${droplistProps.className}` : ''}`} />\r\n                )}\r\n                {(stackLabels && labels.length) ? (\r\n                    <div className={classes.labels}>\r\n                        {\r\n                            labels.map(label => (\r\n                                <Label key={label[droplistProps.itemIdKey]} onClose={() => {this.removeLabel(label);}}>{label[droplistProps.itemTextKey]}</Label>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                ) : ''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAutocomplete.propTypes = {\r\n    classes: PropTypes.object,\r\n    id: PropTypes.string,\r\n    inputProps: PropTypes.object.isRequired,\r\n    droplistProps: PropTypes.object.isRequired,\r\n    onChange: PropTypes.func,\r\n    onFocus: PropTypes.func,\r\n    onBlur: PropTypes.func,\r\n    onClick: PropTypes.func,\r\n    stackLabels: PropTypes.bool,\r\n    limit: PropTypes.number,\r\n    limitPlaceholder: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nAutocomplete.defaultProps = {\r\n    inputProps: {},\r\n    droplistProps: {}\r\n};\r\n\r\nexport default Autocomplete;","examples":[]},{"name":"Avatar","description":"The Avatar component shows a rounded avatar with a profile picture, a gender icon or the first two capital letters of a name.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"photo":{"type":{"name":"string"},"required":false,"description":"A url to show a photo as the avatar."},"gender":{"type":{"name":"string"},"required":false,"description":"Use the values 'm' or 'f' to show a default avatar with an icon representing the gender."},"name":{"type":{"name":"string"},"required":false,"description":"Pass a name to show two initials."},"size":{"type":{"name":"number"},"required":false,"description":"The size of the avatar.","defaultValue":{"value":"70","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarContent from './AvatarContent';\r\n\r\n/** The Avatar component shows a rounded avatar with a profile picture, a gender icon or the first two capital letters of a name. */\r\nclass Avatar extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, photo, gender, name, size, id, className, style } = this.props;\r\n        return (\r\n            <div id={id} className={`${classes.circle}${className ? ` ${className}` : ''}`} style={style}>\r\n                <AvatarContent photo={photo} gender={gender} name={name} size={size} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAvatar.defaultProps = {\r\n    size: 70\r\n};\r\n\r\nAvatar.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** A url to show a photo as the avatar. */\r\n    photo: PropTypes.string,\r\n    /** Use the values 'm' or 'f' to show a default avatar with an icon representing the gender. */\r\n    gender: PropTypes.string,\r\n    /** Pass a name to show two initials. */\r\n    name: PropTypes.string,\r\n    /** The size of the avatar. */\r\n    size: PropTypes.number,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Avatar;","examples":[{"name":"Example1","description":"","code":"/* Avatar with photo */\r\nimport React from 'react';\r\nimport { Avatar } from 'r12-common';\r\n\r\nexport default function Example1() {\r\n    return <Avatar photo=\"http://placehold.it/70x70\" />\r\n}"},{"name":"Example2","description":"","code":"/* Avatar with gender icon */\r\nimport React from 'react';\r\nimport { Avatar } from 'r12-common';\r\n\r\nexport default function Example2() {\r\n    return <Avatar gender=\"f\" />\r\n}"},{"name":"Example3","description":"","code":"/* Avatar with capital letters */\r\nimport React from 'react';\r\nimport { Avatar } from 'r12-common';\r\n\r\nexport default function Example3() {\r\n    return <Avatar name=\"John Doe\" />\r\n}"},{"name":"Example4","description":"","code":"/* Avatar with custom size */\r\nimport React from 'react';\r\nimport { Avatar } from 'r12-common';\r\n\r\nexport default function Example4() {\r\n    return <Avatar name=\"John Doe\" size={40} />\r\n}"}]},{"name":"Button","description":"A flexible button component, with four pre-stablished themes.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"string"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"There are four themes available: main, secondary, blue, flat.","defaultValue":{"value":"'main'","computed":false}},"size":{"type":{"name":"string"},"required":false,"description":"The button has three different sizes: sm, md, lg.","defaultValue":{"value":"'sm'","computed":false}},"block":{"type":{"name":"bool"},"required":false,"description":"The block property lets the button expand to ocupy the whole width of its parent.","defaultValue":{"value":"false","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"It disables the button and shows it with the proper theme.","defaultValue":{"value":"false","computed":false}},"icon":{"type":{"name":"string"},"required":false,"description":"Use the name of any of the icons available in the library."},"loading":{"type":{"name":"bool"},"required":false,"description":"The loading property disables the button and shows a loading icon spinning."},"onClick":{"type":{"name":"func"},"required":false,"description":"The function to call when the button is clicked."},"href":{"type":{"name":"string"},"required":false,"description":"Optionally, you can set the href property and use it like a link."},"target":{"type":{"name":"string"},"required":false,"description":"If you use the href property, you can also define the target."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** A flexible button component, with four pre-stablished themes. */\r\nclass Button extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, className, children, id, href, target, onClick, theme, size, block, disabled, icon, style, loading } = this.props;\r\n        let classNames=classes.btn;\r\n        if (theme) classNames += ` ${classes[theme]}`;\r\n        if (loading) classNames += ` ${classes.loading}`;\r\n        if (disabled) classNames += ` ${classes.disabled}`;\r\n        if (size == \"md\" || size == \"lg\") classNames += ` ${classes[size]}`;\r\n        if (block) classNames += ` ${classes.block}`;\r\n        if (className) classNames += ` ${className}`;\r\n        if (href) {\r\n            return (\r\n                <a\r\n                    className={classNames}\r\n                    href={disabled ? href : ''}\r\n                    target={target ? target : ''}\r\n                    onClick={!disabled && onClick}\r\n                    id={id}\r\n                    style={style}>\r\n                    <span className={classes.cont}>\r\n                        {icon ? <i className={classes.icon} /> : ''}\r\n                        {children}\r\n                    </span>\r\n                    {loading && <span className={classes.loadCont}>\r\n                        <i className={classes.loadIcon} />\r\n                    </span>}\r\n                </a>\r\n            );\r\n        } else {\r\n            return (\r\n                <button\r\n                    className={classNames}\r\n                    onClick={!disabled && onClick}\r\n                    id={id}\r\n                    style={style}>\r\n                    <span className={classes.cont}>\r\n                        {icon ? <i className={classes.icon} /> : ''}\r\n                        {children}\r\n                    </span>\r\n                    {loading && <span className={classes.loadCont}>\r\n                        <i className={classes.loadIcon} />\r\n                    </span>}\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nButton.defaultProps = {\r\n    theme: 'main',\r\n    size: 'sm',\r\n    block: false,\r\n    disabled: false\r\n};\r\n\r\nButton.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.string,\r\n    /** There are four themes available: main, secondary, blue, flat. */\r\n    theme: PropTypes.string,\r\n    /** The button has three different sizes: sm, md, lg. */\r\n    size: PropTypes.string,\r\n    /** The block property lets the button expand to ocupy the whole width of its parent. */\r\n    block: PropTypes.bool,\r\n    /** It disables the button and shows it with the proper theme. */\r\n    disabled: PropTypes.bool,\r\n    /** Use the name of any of the icons available in the library. */\r\n    icon: PropTypes.string,\r\n    /** The loading property disables the button and shows a loading icon spinning. */\r\n    loading: PropTypes.bool,\r\n    /** The function to call when the button is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Optionally, you can set the href property and use it like a link. */\r\n    href: PropTypes.string,\r\n    /** If you use the href property, you can also define the target. */\r\n    target: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Button;","examples":[{"name":"Example1","description":"","code":"/* Themes */\r\nimport React from 'react';\r\nimport { Button } from 'r12-common';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div>\r\n            <Button theme=\"main\">Main</Button>\r\n            <Button theme=\"secondary\">Secondary</Button>\r\n            <Button theme=\"blue\">Blue</Button>\r\n            <Button theme=\"main\">Flat</Button>\r\n        </div>\r\n    ) \r\n}"},{"name":"Example2","description":"","code":"/* Sizes */\r\nimport React from 'react';\r\nimport { Button } from 'r12-common';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div>\r\n            <Button size=\"sm\">Small</Button>\r\n            <Button size=\"md\">Medium</Button>\r\n            <Button size=\"lg\">Large</Button>\r\n        </div>\r\n    ) \r\n}"},{"name":"Example3","description":"","code":"/* Block */\r\nimport React from 'react';\r\nimport { Button } from 'r12-common';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Button block>Block</Button>\r\n    ) \r\n}"},{"name":"Example4","description":"","code":"/* Button with an icon */\r\nimport React from 'react';\r\nimport { Button } from 'r12-common';\r\n\r\nexport default function Example4() {\r\n    return (\r\n        <Button icon=\"search\">Icon</Button>\r\n    ) \r\n}"},{"name":"Example5","description":"","code":"/* Button loading */\r\nimport React from 'react';\r\nimport { Button } from 'r12-common';\r\n\r\nexport default function Example5() {\r\n    return (\r\n        <Button loading>Loading</Button>\r\n    ) \r\n}"}]},{"name":"ButtonAlign","description":"Use this component to align a Button correctly side to side with an Input.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"object"},"required":false,"description":""},"size":{"type":{"name":"string"},"required":false,"description":"Use the same size used in the button.","defaultValue":{"value":"'sm'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Use this component to align a Button correctly side to side with an Input. */\r\nclass ButtonAlign extends React.Component {\r\n    \r\n    render() {\r\n        \r\n        const { classes, children, size } = this.props;\r\n        return (\r\n            <div className={size ? classes[size] : classes.sm}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nButtonAlign.defaultProps = {\r\n    size: 'sm'\r\n};\r\n\r\nButtonAlign.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.object,\r\n    /** Use the same size used in the button. */\r\n    size: PropTypes.string\r\n};\r\n\r\nexport default ButtonAlign;","examples":[{"name":"Example1","description":"","code":"/* Button aligned with an input */\r\nimport React from 'react';\r\nimport { ButtonAlign, Button, Input, Flexbox } from 'r12-common';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Flexbox display=\"flex\">\r\n            <Input label=\"Input\" />\r\n            <ButtonAlign size=\"sm\">\r\n                <Button size=\"sm\">Aligned button</Button>\r\n            </ButtonAlign>\r\n        </Flexbox>\r\n    ) \r\n}"}]},{"name":"Card","description":"Container component with a card style","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"shadow":{"type":{"name":"number"},"required":false,"description":"Set the level of shadow of the card. Choose one between 1 and 6.","defaultValue":{"value":"3","computed":false}},"noPadding":{"type":{"name":"bool"},"required":false,"description":"The card has by default a padding. Use this property if you need to remove it."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Container component with a card style */\r\nclass Card extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, noPadding, shadow, className, style, id } = this.props;\r\n        return (\r\n            <div id={id} className={`${!noPadding ? classes.card : classes.cardNoPadding}${shadow ? ` ${classes[`shadow${shadow}`]}` : ''}${className ? ` ${className}` : ''}`} style={style}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCard.defaultProps = {\r\n    shadow: 3\r\n};\r\n\r\nCard.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    /** Set the level of shadow of the card. Choose one between 1 and 6. */\r\n    shadow: PropTypes.number,\r\n    /** The card has by default a padding. Use this property if you need to remove it. */\r\n    noPadding: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Card;","examples":[{"name":"Example1","description":"","code":"/* Card with a shadow of level 6 */\r\nimport React from 'react';\r\nimport { Card, Title } from 'r12-common';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Card shadow={6}>\r\n            <Title h={3}>Card content</Title>\r\n        </Card>\r\n    )\r\n}"},{"name":"Example2","description":"","code":"/* Card with no padding */\r\nimport React from 'react';\r\nimport { Card, Title } from 'r12-common';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Card noPadding>\r\n            <Title h={3}>Card content</Title>\r\n        </Card>\r\n    )\r\n}"}]},{"name":"Check","description":"Checkbox component.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"input":{"type":{"name":"object"},"required":false,"description":"This is the object that redux-form passes to the component."},"value":{"type":{"name":"bool"},"required":false,"description":"Default value for the checkbox."},"onChange":{"type":{"name":"func"},"required":false,"description":"The function to call when the value of the checkbox changes."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disable the checkbox."},"label":{"type":{"name":"string"},"required":false,"description":"Text to display next to the checkbox."},"right":{"type":{"name":"string"},"required":false,"description":"Aditional text to display floating to the right."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Checkbox component. */\r\nclass Check extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.input ? props.input.value : props.value \r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        const { input, value } = props;\r\n        if (input && input.value != this.state.value)\r\n            this.setState({ value: input.value });\r\n        else if (value && this.state.value != value)\r\n            this.setState({ value });\r\n        else if(value != this.state.value)\r\n            this.setState({ value });\r\n    }\r\n\r\n    toggle() {\r\n        const { input, onChange, id, disabled } = this.props;\r\n        if (!disabled) {\r\n            let value = !this.state.value;\r\n            this.setState({ value });\r\n            if (input) input.onBlur(value);\r\n            if (onChange) onChange(value, id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.state;\r\n        const { classes, input, label, right, disabled, id, className, style } = this.props;\r\n        let state = input && input.value ? input.value : value;\r\n        return (\r\n            <div\r\n                id={id}\r\n                className={`${classes.cont}${state ? ` ${classes.active}` : ''}${disabled ? ` ${classes.disabled}` : ''}${className ? ` ${className}` : ''}`}\r\n                tabIndex={0}\r\n                onClick={this.toggle}\r\n                style={style}>\r\n                <div className={classes.check} />\r\n                {label && <span className={classes.label}>{label}</span>}\r\n                {right && <span className={classes.right}>{right}</span>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nCheck.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** This is the object that redux-form passes to the component. */\r\n    input: PropTypes.object,\r\n    /** Default value for the checkbox. */\r\n    value: PropTypes.bool,\r\n    /** The function to call when the value of the checkbox changes. */\r\n    onChange: PropTypes.func,\r\n    /** Disable the checkbox. */\r\n    disabled: PropTypes.bool,\r\n    /** Text to display next to the checkbox.  */\r\n    label: PropTypes.string,\r\n    /** Aditional text to display floating to the right. */\r\n    right: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Check;","examples":[{"name":"Example1","description":"","code":"/* Checkbox with default value */\r\nimport React from 'react';\r\nimport { Check } from 'r12-common';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Check value />\r\n        </div>\r\n    )\r\n}"},{"name":"Example2","description":"","code":"/* Checkbox with label and text on the right */\r\nimport React from 'react';\r\nimport { Check } from 'r12-common';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <div style={{display:'inline-block', width:300}}>\r\n            <Check label=\"Label\" right=\"Right text\" />\r\n        </div>\r\n    )\r\n}"},{"name":"Example3","description":"","code":"/* Disabled checkbox */\r\nimport React from 'react';\r\nimport { Check } from 'r12-common';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <div style={{display:'inline-block'}}>\r\n            <Check label=\"Disabled\" disabled />\r\n        </div>\r\n    )\r\n}"}]},{"name":"Column","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"object"},"required":false,"description":""},"sm":{"type":{"name":"object"},"required":false,"description":""},"md":{"type":{"name":"object"},"required":false,"description":""},"lg":{"type":{"name":"object"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst getClasses = function(size, data, classes) {\r\n    let string = '';\r\n    if (data.col) string+=' '+classes[`${size}${data.col}`];\r\n    if (data.offset) string+=' '+classes[`offset-${size}${data.offset}`];\r\n    if (data.push) string+=' '+classes[`push-${size}${data.push}`];\r\n    if (data.pull) string+=' '+classes[`pull-${size}${data.pull}`];\r\n    return string;\r\n};\r\n\r\nconst Column = ({ classes, children, xs, sm, md, lg, id, className, style }) => (\r\n    <div\r\n        className={`${classes.col}${xs ? getClasses('xs', xs, classes) : ''}${sm ? getClasses('sm', sm, classes) : ''}${md ? getClasses('md', md, classes) : ''}${lg ? getClasses('lg', lg, classes) : ''}${className ? ` ${className}` : ''}`}\r\n        id={id}\r\n        style={style}>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nColumn.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    xs: PropTypes.object,\r\n    sm: PropTypes.object,\r\n    md: PropTypes.object,\r\n    lg: PropTypes.object,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Column;","examples":[]},{"name":"Container","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"fluid":{"type":{"name":"bool"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Container = ({ classes, children, fluid, className, id, style }) => (\r\n    <div className={`${fluid ? classes.conFluid : classes.con}${className ? ` ${className}` : ''}`} style={style} id={id}>{children}</div>\r\n);\r\n\r\nContainer.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    fluid: PropTypes.bool,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Container;","examples":[]},{"name":"Droplist","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""},"items":{"type":{"name":"array"},"required":false,"description":""},"term":{"type":{"name":"string"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""},"groups":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"groupNameKey":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'text'","computed":false}},"groupIdKey":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'id'","computed":false}},"groupItemsKey":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'items'","computed":false}},"itemTextKey":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'text'","computed":false}},"itemTextRightKey":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'textRight'","computed":false}},"itemIdKey":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'id'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\n\r\nclass Droplist extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: props.term ? props.term.trim() : ''\r\n        };\r\n        this.onClick = this.onClick.bind(this);\r\n        this.renderList = this.renderList.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({\r\n            term: props.term.trim()\r\n        });\r\n    }\r\n\r\n    onClick(item) {\r\n        const { onClick } = this.props;\r\n        if (onClick) onClick(item);\r\n    }\r\n\r\n    compareText(text, term) {\r\n        let textLC = text.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n        let termLC = term.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n        let index = textLC.indexOf(termLC);\r\n        return index;\r\n    }\r\n    \r\n    separateText(itemText, index, term) {\r\n        let text = [itemText.substr(0, index), itemText.substr(index, term.length), itemText.substr(index+term.length, itemText.length)];\r\n        return text;\r\n    }\r\n    \r\n    renderList(items) {\r\n        const { term } = this.state;\r\n        const { classes, itemIdKey, itemTextKey, itemTextRightKey } = this.props;\r\n        const itemsDOM = items.map(item => {\r\n            let index = this.compareText(item[itemTextKey], term);\r\n            if (index >= 0) {\r\n                let text = this.separateText(item[itemTextKey], index, term);\r\n                return (\r\n                    <div\r\n                        key={item[itemIdKey]}\r\n                        onClick={() => this.onClick(item)}\r\n                        className={classes.item}>\r\n                        {text[0].length ? text[0] : ''}\r\n                        <span className={classes.bold}>{text[1].length ? text[1] : ''}</span>\r\n                        {text[2].length ? text[2] : ''}\r\n                        {item[itemTextRightKey] ? <span className={classes.right}>{item[itemTextRightKey]}</span> : ''}\r\n                    </div>\r\n                );\r\n            }\r\n            return false;\r\n        });\r\n        return itemsDOM;\r\n    }\r\n    \r\n    render() {\r\n        const { term } = this.state;\r\n        const { classes, className, style, id, items, groups, groupNameKey, groupIdKey, groupItemsKey, itemTextKey, itemTextRightKey, itemIdKey, onClick } = this.props;\r\n        return (\r\n            <div className={`${classes.block}${className ? ` ${className}` : ''}`} id={id}>\r\n                {\r\n                    groups ? (\r\n                        items.map(group => {\r\n                            return (\r\n                                <div key={group[groupIdKey]} className={classes.groupCon}>\r\n                                    <div className={classes.group}>{group[groupNameKey]}</div>\r\n                                    {\r\n                                        this.renderList(group[groupItemsKey])\r\n                                    }\r\n                                </div>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        this.renderList(items)\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDroplist.defaultProps = {\r\n    groups: false,\r\n    groupNameKey:'text',\r\n    groupIdKey:'id',\r\n    groupItemsKey:'items',\r\n    itemTextKey:'text',\r\n    itemTextRightKey:'textRight',\r\n    itemIdKey:'id'\r\n};\r\n\r\nDroplist.propTypes = {\r\n    classes: PropTypes.object,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    style: PropTypes.object,\r\n    items: PropTypes.array,\r\n    term: PropTypes.string,\r\n    onClick: PropTypes.func,\r\n    groups: PropTypes.bool,\r\n    groupNameKey: PropTypes.string,\r\n    groupIdKey: PropTypes.string,\r\n    groupItemsKey: PropTypes.string,\r\n    itemTextKey: PropTypes.string,\r\n    itemTextRightKey: PropTypes.string,\r\n    itemIdKey: PropTypes.string\r\n};\r\n\r\nexport default Droplist;","examples":[]},{"name":"Flexbox","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"display":{"type":{"name":"string"},"required":false,"description":""},"direction":{"type":{"name":"string"},"required":false,"description":""},"wrap":{"type":{"name":"string"},"required":false,"description":""},"justifyContent":{"type":{"name":"string"},"required":false,"description":""},"alignItems":{"type":{"name":"string"},"required":false,"description":""},"alignContent":{"type":{"name":"string"},"required":false,"description":""},"order":{"type":{"name":"number"},"required":false,"description":""},"flex":{"type":{"name":"string"},"required":false,"description":""},"alignSelf":{"type":{"name":"string"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Flexbox extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, display, direction, wrap, justifyContent, alignItems, alignContent, order, flex, alignSelf, id, className } = this.props;\r\n        let { style } = this.props;\r\n        let displayClass = display ? display == 'inline-flex' ? classes.iFlex : classes.flex : '';\r\n        if (!style)\r\n            style = {};\r\n        if (order)\r\n            style.order = order;\r\n        if (flex)\r\n            style.flex = flex;\r\n        return (\r\n            <div\r\n                className={`${displayClass}${(display && direction) ? ` ${classes[direction]}` : ''}${(display && wrap) ? ` ${classes[wrap]}` : ''}${(display && justifyContent) ? ` ${classes[`j${justifyContent}`]}` : ''}${(display && alignItems) ? ` ${classes[`a${alignItems}`]}` : ''}${(display && alignContent) ? ` ${classes[`c${alignContent}`]}` : ''}${(alignSelf) ? ` ${classes[`s${alignSelf}`]}` : ''}${className ? ` ${className}` : ''}`}\r\n                id={id}\r\n                style={style}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFlexbox.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    display: PropTypes.string,\r\n    direction: PropTypes.string,\r\n    wrap: PropTypes.string,\r\n    justifyContent: PropTypes.string,\r\n    alignItems: PropTypes.string,\r\n    alignContent: PropTypes.string,\r\n    order: PropTypes.number,\r\n    flex: PropTypes.string,\r\n    alignSelf: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Flexbox;","examples":[]},{"name":"Footer","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"buttons":{"type":{"name":"array"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\nimport $ from 'jquery';\r\n\r\nimport Container from '../Container';\r\nimport Icon from '../Icon';\r\n\r\nclass Footer extends React.Component {\r\n    \r\n    showSub(button) {\r\n        $('#'+button.sub.id).fadeIn('fast').click((e) => {\r\n            e.stopPropagation();\r\n        });\r\n        $('#'+button.sub.id+' a').click(function() {\r\n            $('#'+button.sub.id).fadeOut('fast');\r\n        });\r\n        $('body').click(function() {\r\n            $('#'+button.sub.id).fadeOut('fast');\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { classes, buttons } = this.props;\r\n        return (\r\n            <Container fluid={true} className={classes.footer}>\r\n                <ul className={classes.footerList}>\r\n                    {\r\n                        buttons.map(button => (\r\n                            <li key={button.id} className={classes.listElement}>\r\n                                <a className={classes.link} id={button.id} href={button.href} target={button.target} onClick={'sub' in button ? () => {this.showSub(button);} : button.onClick ? button.onClick : undefined}>{button.label}</a>\r\n                                {button.sub && (\r\n                                    <ul className={classes.dropdownMenu} id={button.sub.id} style={button.sub.style}>\r\n                                        {button.sub.items.map(item => (\r\n                                            <li key={item.id} className={classes.dropdownElement}>\r\n                                                <a className={classes.dropdownLink} id={item.id} href={item.href} target={item.target}>{item.label}</a>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                )}\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nFooter.propTypes = {\r\n    classes: PropTypes.object,\r\n    buttons: PropTypes.array\r\n};\r\n\r\nexport default Footer;","examples":[]},{"name":"Header","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"logo":{"type":{"name":"node"},"required":false,"description":""},"title":{"type":{"name":"string"},"required":false,"description":""},"active":{"type":{"name":"string"},"required":false,"description":""},"nav":{"type":{"name":"node"},"required":false,"description":""},"menu":{"type":{"name":"node"},"required":false,"description":""},"messagesIcon":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{}","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\nimport Waypoint from 'react-waypoint';\r\n\r\nimport Container from '../Container';\r\nimport Hidden from '../Hidden';\r\nimport Visible from '../Visible';\r\nimport SightLogo from '../SightLogo';\r\n\r\nclass Header extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            shadow: true\r\n        };\r\n        this.removeShadow = this.removeShadow.bind(this);\r\n        this.addShadow = this.addShadow.bind(this);\r\n    }\r\n    \r\n    removeShadow() {\r\n        this.setState({\r\n            shadow: false\r\n        });\r\n    }\r\n    \r\n    addShadow() {\r\n        this.setState({\r\n            shadow: true\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { shadow } = this.state;\r\n        const { classes, logo, nav, menu, title, active, messagesIcon } = this.props;\r\n        return (\r\n            <div id=\"mainNav\" className={classes.navbar}>\r\n                <div className={`${classes.master} ${shadow ? classes.shadow : ''}`}>\r\n                    <div className={classes.content}>\r\n                        <Hidden xs>\r\n                            {logo}\r\n                        </Hidden>\r\n                        <Visible xs>\r\n                            <div className={classes.title}>{title}</div>\r\n                        </Visible>\r\n                        <div className={classes.user}>\r\n                            {(messagesIcon.hasOwnProperty('active') && messagesIcon.active) && (\r\n                                <a id={messagesIcon.id} href={messagesIcon.href} className={classes.messages}>\r\n                                    <i className={classes.bubble} />\r\n                                </a>\r\n                                )}\r\n                            {menu}\r\n                        </div>\r\n                        <Hidden xs>\r\n                            {nav}\r\n                        </Hidden>\r\n                    </div>\r\n                </div>\r\n                <Visible xs>\r\n                    <div className={classes.separate}>\r\n                        <Waypoint topOffset={60} onEnter={this.removeShadow} onLeave={this.addShadow}>\r\n                            <div className={!shadow ? classes.shadow : ''}>\r\n                                {nav}\r\n                            </div>\r\n                        </Waypoint>\r\n                    </div>\r\n                </Visible>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    classes: PropTypes.object,\r\n    logo: PropTypes.node,\r\n    title: PropTypes.string,\r\n    active: PropTypes.string,\r\n    nav: PropTypes.node,\r\n    menu: PropTypes.node,\r\n    messagesIcon: PropTypes.object\r\n};\r\n\r\nHeader.defaultProps = {\r\n    messagesIcon: {}\r\n};\r\n\r\nexport default Header;","examples":[]},{"name":"Hidden","description":"","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"bool"},"required":false,"description":""},"sm":{"type":{"name":"bool"},"required":false,"description":""},"md":{"type":{"name":"bool"},"required":false,"description":""},"lg":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport grid from '../subatomic/grid';\r\n\r\nclass Hidden extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 0\r\n        };\r\n        this.getDimensions = this.getDimensions.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getDimensions();\r\n        window.addEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this.getDimensions();\r\n        window.removeEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    getDimensions() {\r\n        const width = window.innerWidth;\r\n        this.setState({\r\n            width\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { width } = this.state;\r\n        const { children, xs, sm, md, lg} = this.props;\r\n        if (\r\n            ((width >= grid.xs && width < grid.sm) && xs) ||\r\n            ((width >= grid.sm && width < grid.md) && sm) ||\r\n            ((width >= grid.md && width < grid.lg) && md) ||\r\n            ((width >= grid.lg) && lg)\r\n        ) {\r\n            return <span />;\r\n        } else {\r\n            return <span>{children}</span>;\r\n        }\r\n    }\r\n}\r\n\r\nHidden.propTypes = {\r\n    children: PropTypes.node,\r\n    xs: PropTypes.bool,\r\n    sm: PropTypes.bool,\r\n    md: PropTypes.bool,\r\n    lg: PropTypes.bool\r\n};\r\n\r\nexport default Hidden;","examples":[]},{"name":"Icon","description":"Component to display any of the icons on the library.","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"iconName":{"type":{"name":"string"},"required":true,"description":"Name of the icon to render. It must match with any of the icons on the library."},"width":{"type":{"name":"number"},"required":false,"description":"Width of the icon. By default it will take the value defined on the library for the specified icon."},"height":{"type":{"name":"number"},"required":false,"description":"Height of the icon. By default it will take the value defined on the library for the specified icon."},"display":{"type":{"name":"string"},"required":false,"description":"Display property of the icon. By default it will take the value defined on the library for the specified icon."},"transition":{"type":{"name":"string"},"required":false,"description":"Transition for animations.","defaultValue":{"value":"'0.3s all'","computed":false}},"colors":{"type":{"name":"array"},"required":false,"description":"Array with the colors to use in the icon. Some icons use more than one color. By default it will take the value defined on the library for the specified icon."},"hover":{"type":{"name":"array"},"required":false,"description":"Array with the colors to use on the icon when it's hovered."},"onClick":{"type":{"name":"func"},"required":false,"description":"Function to call when the icon is clicked."},"alt":{"type":{"name":"string"},"required":false,"description":"Alt property, in case you need to set it."},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Component to display any of the icons on the library. */\r\nclass Icon extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, className, style, id, onClick, alt } = this.props;\r\n        const IconType = onClick ? 'button' : 'span';\r\n        return (\r\n            <IconType id={id} className={`${classes.icon}${onClick ? ` ${classes.click}` : ''}${className ? ` ${className}` : ''}`} style={style} onClick={onClick} alt={alt} />\r\n        );\r\n    }\r\n}\r\n\r\nIcon.defaultProps = {\r\n    transition: '0.3s all'\r\n};\r\n\r\nIcon.propTypes = {\r\n    classes: PropTypes.object,\r\n    /** Name of the icon to render. It must match with any of the icons on the library. */\r\n    iconName: PropTypes.string.isRequired,\r\n    /** Width of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    width: PropTypes.number,\r\n    /** Height of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    height: PropTypes.number,\r\n    /** Display property of the icon. By default it will take the value defined on the library for the specified icon. */\r\n    display: PropTypes.string,\r\n    /** Transition for animations. */\r\n    transition: PropTypes.string,\r\n    /** Array with the colors to use in the icon. Some icons use more than one color. By default it will take the value defined on the library for the specified icon. */\r\n    colors: PropTypes.array,\r\n    /** Array with the colors to use on the icon when it's hovered. */\r\n    hover: PropTypes.array,\r\n    /** Function to call when the icon is clicked. */\r\n    onClick: PropTypes.func,\r\n    /** Alt property, in case you need to set it. */\r\n    alt: PropTypes.string,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Icon;","examples":[{"name":"Example1","description":"","code":"/* Render an icon */\r\nimport React from 'react';\r\nimport { Icon } from 'r12-common';\r\n\r\nexport default function Example1() {\r\n    return (\r\n        <Icon iconName=\"search\" />\r\n    )\r\n}"},{"name":"Example2","description":"","code":"/* Icon with custom size */\r\nimport React from 'react';\r\nimport { Icon } from 'r12-common';\r\n\r\nexport default function Example2() {\r\n    return (\r\n        <Icon iconName=\"search\" width={100} height={100} />\r\n    )\r\n}"},{"name":"Example3","description":"","code":"/* Icon with custom colors */\r\nimport React from 'react';\r\nimport { Icon, colors } from 'r12-common';\r\n\r\nexport default function Example3() {\r\n    return (\r\n        <Icon iconName=\"search\" colors={[colors.blue]} hover={[colors.red]} />\r\n    )\r\n}"}]},{"name":"Input","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"type":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'text'","computed":false}},"maxLength":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"100","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":""},"placeholder":{"type":{"name":"string"},"required":false,"description":""},"name":{"type":{"name":"string"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""},"disabled":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"counter":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"autoFocus":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"clear":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"error":{"type":{"name":"string"},"required":false,"description":""},"valid":{"type":{"name":"bool"},"required":false,"description":""},"valueProp":{"type":{"name":"node"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"selectOnFocus":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"meta":{"type":{"name":"object"},"required":false,"description":""},"input":{"type":{"name":"object"},"required":false,"description":""},"onFocus":{"type":{"name":"func"},"required":false,"description":""},"onBlur":{"type":{"name":"func"},"required":false,"description":""},"onChange":{"type":{"name":"func"},"required":false,"description":""},"onClear":{"type":{"name":"func"},"required":false,"description":""},"onRef":{"type":{"name":"func"},"required":false,"description":""},"options":{"type":{"name":"array"},"required":false,"description":""},"iconName":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\n\r\nimport Icon from '../Icon';\r\n\r\nimport colors from '../subatomic/colors';\r\n\r\nclass Input extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status: 'default',\r\n            value: props.valueProp ? props.valueProp : '',\r\n            touched: false,\r\n            initialValue: props.valueProp ? props.valueProp : ''\r\n        };\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onClear = this.onClear.bind(this);\r\n        this.setAsComplete = this.setAsComplete.bind(this);\r\n    }\r\n    \r\n    componentWillMount() {\r\n        let { input, onRef } = this.props;\r\n        let { value } = this.state;\r\n        if (input && input.value)\r\n            this.setState({ value: input.value });\r\n            if (onRef) onRef(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        let { value } = this.state;\r\n        if (value) {\r\n            this.setAsComplete();\r\n        }\r\n    }\r\n    \r\n    componentWillReceiveProps(props) {\r\n        let { input, valueProp } = props;\r\n        let { value, initialValue } = this.state;\r\n        if (input && input.value)\r\n            this.setState({ value: input.value });\r\n        else if (valueProp && valueProp != initialValue)\r\n            this.setState({ value: valueProp });\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        let { onRef } = this.props;\r\n        if (onRef) onRef(undefined);\r\n    }\r\n    \r\n    setAsComplete() {\r\n        this.setState({ status: 'complete' });\r\n    }\r\n    \r\n    onFocus({ target }) {\r\n        const { onFocus, selectOnFocus } = this.props;\r\n        if (selectOnFocus) target.select();\r\n        this.setState({ status:'focus', touched: true });\r\n        if (onFocus) onFocus();\r\n    }\r\n    \r\n    onBlur({ target: {value} }) {\r\n        const { input, onBlur } = this.props;\r\n        this.setState({ value:value, status: value.length ? 'complete' : 'default' });\r\n        if (onBlur) onBlur(value);\r\n        if (input) input.onBlur(value);\r\n    }\r\n    \r\n    onChange({ target: {value} }) {\r\n        const { maxLength, input, onChange } = this.props;\r\n        this.setState({ value:value });\r\n        if (onChange) onChange(value);\r\n        if (input) input.onBlur(value);\r\n    }\r\n    \r\n    onClear() {\r\n        const { input, onClear } = this.props;\r\n        this.setState({ value:'', status: 'default' });\r\n        if (onClear) onClear();\r\n        if (input) input.onBlur(value);\r\n    }\r\n    \r\n    setIconColor(status) {\r\n        let iconColors = {\r\n            default: colors.black,\r\n            focus: colors.blue,\r\n            complete: colors.black,\r\n            correct: colors.green,\r\n            error: colors.red,\r\n            disabled: colors.grey1\r\n        };\r\n        return iconColors[status];\r\n    }\r\n    \r\n    render() {\r\n        const { status, value, touched } = this.state;\r\n        const { input, classes, className, label, placeholder, counter, maxLength, type, options, name, id, style, disabled, meta, autoFocus, error, valid, clear, selectOnFocus, iconName } = this.props;\r\n        let realStatus = status;\r\n        let InputType = (type == \"textarea\" ? \"textarea\" : type == \"select\" ? \"select\" : \"input\");\r\n        if (status != 'focus') {\r\n            if (disabled)\r\n                realStatus = 'disabled';\r\n            else if ((meta && meta.error && meta.touched) || touched && error)\r\n                realStatus = 'error';\r\n            else if ((meta && meta.valid) || (touched && valid))\r\n                realStatus = 'correct';\r\n            else if (input && input.value)\r\n                realStatus = 'complete';\r\n        }\r\n        let iconColor;\r\n        if (iconName)\r\n            iconColor = this.setIconColor(realStatus);\r\n        if (disabled) {\r\n            return (\r\n                <div className={`${classes.container} ${classes.disabled} ${(!label && placeholder) && classes.push}${className ? ` ${className}` : ''}`} style={style}>\r\n                    {label && (\r\n                        <label className={`${classes.label} ${classes.left}`}>\r\n                            {label}\r\n                        </label>\r\n                    )}\r\n                    <label className={`${classes.input}${iconName ? ` ${classes.hasIcon}` : ''}`}>\r\n                        {(input && input.value) ? input.value : value ? value : placeholder}\r\n                    </label>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className={`${classes.container} ${classes[realStatus]}${(!label && placeholder) ? ` ${classes.push}` : ''}${className ? ` ${className}` : ''}`} style={style}>\r\n                {label && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.left}`}>\r\n                        {label}\r\n                    </label>\r\n                )}\r\n                {(!label && placeholder) && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.left} ${classes.placeholder}${iconName ? ` ${classes.pushHolder}` : ''}`}>\r\n                        {placeholder}\r\n                    </label>\r\n                )}\r\n                {iconName && (\r\n                    <Icon iconName={iconName} width={24} height={24} display=\"inline-block\" className={classes.icon} colors={[iconColor]} />\r\n                )}\r\n                {(counter && status == 'focus') && (\r\n                    <label\r\n                        className={`${classes.label} ${classes.right} ${classes.counter}`}>\r\n                        {maxLength-value.length}\r\n                    </label>\r\n                )}\r\n                <div className={classes.inputWrap}>\r\n                    {type == \"select\" ? (\r\n                        <InputType\r\n                            type={type}\r\n                            name={name}\r\n                            id={id}\r\n                            className={`${classes.input} ${classes.select}${iconName ? ` ${classes.hasIcon}` : ''}${clear ? ` ${classes.hasClear}` : ''}${type == \"textarea\" ? ` ${classes.textarea}` : ''}${(value && type==\"textarea\") ? ` ${classes.expanded}` : ''}`}\r\n                            placeholder={(label && placeholder) ? placeholder : ''}\r\n                            value={(input && input.value) ? input.value : value}\r\n                            autoFocus={autoFocus}\r\n                            maxLength={maxLength}\r\n                            onFocus={this.onFocus}\r\n                            onBlur={this.onBlur}\r\n                            onChange={this.onChange}\r\n                            ref = {ref => { this.child = ref; }}\r\n                        >\r\n                            {options.map(option => (\r\n                                <option key={option.value} value={option.value}>{option.text}</option>\r\n                            ))}\r\n                        </InputType>\r\n                    ) : (\r\n                        <InputType\r\n                            type={type}\r\n                            name={name}\r\n                            id={id}\r\n                            className={`${classes.input}${iconName ? ` ${classes.hasIcon}` : ''}${clear ? ` ${classes.hasClear}` : ''}${type == \"textarea\" ? ` ${classes.textarea}` : ''}${(value && type==\"textarea\") ? ` ${classes.expanded}` : ''}`}\r\n                            placeholder={(label && placeholder) ? placeholder : ''}\r\n                            value={(input && input.value) ? input.value : value}\r\n                            autoFocus={autoFocus}\r\n                            maxLength={maxLength}\r\n                            onFocus={this.onFocus}\r\n                            onBlur={this.onBlur}\r\n                            onChange={this.onChange}\r\n                            ref = {ref => { this.child = ref; }}\r\n                        />\r\n                    )}\r\n                </div>\r\n                {(value && clear) && (\r\n                    <button onClick={this.onClear} className={classes.clear}><Icon iconName=\"close\" /></button>\r\n                )}\r\n                {((meta && meta.error && meta.touched) || (error && touched) && status != 'focus') && (\r\n                    <label className={`${classes.label} ${classes.error}`}>{meta ? meta.error : error}</label>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nInput.defaultProps = {\r\n    type: 'text',\r\n    counter: false,\r\n    maxLength: 100,\r\n    disabled: false,\r\n    autoFocus: false,\r\n    clear: false,\r\n    valueProp: '',\r\n    selectOnFocus: false\r\n};\r\n\r\nInput.propTypes = {\r\n    classes: PropTypes.object,\r\n    className: PropTypes.string,\r\n    type: PropTypes.string,\r\n    maxLength: PropTypes.number,\r\n    label: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    name: PropTypes.string,\r\n    id: PropTypes.string,\r\n    style: PropTypes.object,\r\n    disabled: PropTypes.bool,\r\n    counter: PropTypes.bool,\r\n    autoFocus: PropTypes.bool,\r\n    clear: PropTypes.bool,\r\n    error: PropTypes.string,\r\n    valid: PropTypes.bool,\r\n    valueProp: PropTypes.node,\r\n    selectOnFocus: PropTypes.bool,\r\n    meta: PropTypes.object,\r\n    input: PropTypes.object,\r\n    onFocus: PropTypes.func,\r\n    onBlur: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    onClear: PropTypes.func,\r\n    onRef: PropTypes.func,\r\n    options: PropTypes.array,\r\n    iconName: PropTypes.string\r\n};\r\n\r\nexport default Input;","examples":[]},{"name":"Label","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""},"onClose":{"type":{"name":"func"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"default\"","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Label extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, className, id, style, onClose, onClick, theme } = this.props;\r\n        return (\r\n            <label className={`${classes.label} ${theme ? classes[theme] : classes.default}${onClick ? ` ${classes.cursor}` : ''}${className ? ` ${className}` : ''}`} id={id} style={style} onClick={onClick}>\r\n                {children}\r\n                {onClose && <span className={classes.close} onClick={e => {e.stopPropagation(); onClose();}} />}\r\n            </label>\r\n        );\r\n    }\r\n}\r\n\r\nLabel.defaultProps= {\r\n    theme: \"default\"\r\n};\r\n\r\nLabel.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    style: PropTypes.object,\r\n    onClose: PropTypes.func,\r\n    onClick: PropTypes.func,\r\n    theme: PropTypes.string\r\n};\r\n\r\nexport default Label;","examples":[]},{"name":"LayerApp","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"blue\"","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"left":{"type":{"name":"node"},"required":false,"description":""},"right":{"type":{"name":"node"},"required":false,"description":""},"center":{"type":{"name":"node"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\n\r\nimport SubHeader from '../SubHeader';\r\n\r\nclass LayerApp extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, theme, fixed, left, right, center } = this.props;\r\n        return (\r\n            <div className={`${classes.layerApp} ${classes[theme]}`}>\r\n                <SubHeader theme={theme} left={left} right={right} center={center} fixed={fixed} />\r\n                <div className={classes.content}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLayerApp.defaultProps = {\r\n    fixed: false,\r\n    theme: \"blue\"\r\n};\r\n\r\nLayerApp.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    theme: PropTypes.string,\r\n    fixed: PropTypes.bool,\r\n    left: PropTypes.node,\r\n    right: PropTypes.node,\r\n    center: PropTypes.node\r\n};\r\n\r\nexport default LayerApp;","examples":[]},{"name":"OrderBy","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"text":{"type":{"name":"string"},"required":false,"description":""},"options":{"type":{"name":"array"},"required":true,"description":""},"value":{"type":{"name":"node"},"required":false,"description":""},"onChange":{"type":{"name":"func"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass OrderBy extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n    \r\n    onChange({target: {value}}) {\r\n        const { onChange } = this.props;\r\n        if (onChange) onChange(value);\r\n    }\r\n    \r\n    render() {\r\n        const { classes, text, options, value } = this.props;\r\n        return (\r\n            <div className={classes.wrap}>\r\n                <span className={classes.text}>{text}</span>\r\n                <select className={classes.select} value={value} onChange={this.onChange}>\r\n                    {options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.text}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nOrderBy.propTypes = {\r\n    classes: PropTypes.object,\r\n    text: PropTypes.string,\r\n    options: PropTypes.array.isRequired,\r\n    value: PropTypes.node,\r\n    onChange: PropTypes.func\r\n};\r\n\r\nexport default OrderBy;","examples":[]},{"name":"Pager","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"pageCount":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"10","computed":false}},"pageRangeDisplayed":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"2","computed":false}},"marginPagesDisplayed":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"3","computed":false}},"previousLabel":{"type":{"name":"node"},"required":false,"description":"","defaultValue":{"value":"'Previous'","computed":false}},"nextLabel":{"type":{"name":"node"},"required":false,"description":"","defaultValue":{"value":"'Next'","computed":false}},"onPageChange":{"type":{"name":"func"},"required":false,"description":""},"initialPage":{"type":{"name":"number"},"required":false,"description":""},"forcePage":{"type":{"name":"number"},"required":false,"description":""},"disableInitialCallback":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"hideNumbers":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"breakLabel":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'...'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\n\r\nimport Icon from '../Icon';\r\n\r\nimport Page from './Page';\r\nimport Break from './Break';\r\n\r\nclass Pager extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected:props.initialPage ? props.initialPage : props.forcePage ? props.forcePage : 0\r\n        };\r\n        this.callCallback = this.callCallback.bind(this);\r\n        this.handlePrevPage = this.handlePrevPage.bind(this);\r\n        this.handleNextPage = this.handleNextPage.bind(this);\r\n        this.handlePageSelected = this.handlePageSelected.bind(this);\r\n        this.getPageElement = this.getPageElement.bind(this);\r\n        this.pagination = this.pagination.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const { initialPage, disableInitialCallback } = this.props;\r\n        if (typeof(initialPage) != 'undefined' && !disableInitialCallback) {\r\n            this.callCallback(initialPage);\r\n        }\r\n    }\r\n    \r\n    componentWillReceiveProps(props) {\r\n        if (typeof(props.forcePage) != 'undefined' && this.props.forcePage != props.forcePage) {\r\n          this.setState({selected: props.forcePage});\r\n        }\r\n    }\r\n    \r\n    callCallback(selectedItem) {\r\n        const { onPageChange } = this.props;\r\n        if (typeof(onPageChange) != 'undefined' && typeof(onPageChange) == 'function') {\r\n            onPageChange({selected: selectedItem});\r\n        }\r\n    }\r\n    \r\n    handlePrevPage(e) {\r\n        const { selected } = this.state;\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (selected > 0) {\r\n            this.handlePageSelected(selected -1, e);\r\n        }\r\n    }\r\n    \r\n    handleNextPage(e) {\r\n        const { selected } = this.state;\r\n        const { pageCount } = this.props;\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (selected < pageCount - 1) {\r\n            this.handlePageSelected(selected + 1, e);\r\n        }\r\n    }\r\n    \r\n    handlePageSelected(selected, e) {\r\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n        if (this.state.selected == selected) return;\r\n        this.setState({selected});\r\n        this.callCallback(selected);\r\n    }\r\n    \r\n    getPageElement(index) {\r\n        const { selected } = this.state;\r\n        return (\r\n            <Page\r\n                key={index}\r\n                onClick={this.handlePageSelected.bind(null, index)}\r\n                selected={selected == index}\r\n                page={index+1}\r\n            />\r\n        );\r\n    }\r\n    \r\n    pagination() {\r\n        const items = [];\r\n        const { selected } = this.state;\r\n        const { pageRangeDisplayed, pageCount, marginPagesDisplayed, breakLabel } = this.props;\r\n        \r\n        if (pageCount <= pageRangeDisplayed) {\r\n            for (let index = 0; index < pageCount; index++) {\r\n                items.push(this.getPageElement(index));\r\n            }\r\n        } else {\r\n            let leftSide  = (pageRangeDisplayed / 2);\r\n            let rightSide = (pageRangeDisplayed - leftSide);\r\n            \r\n            if (selected > pageCount - pageRangeDisplayed / 2) {\r\n                rightSide = pageCount - selected;\r\n                leftSide  = pageRangeDisplayed - rightSide;\r\n            } else if (selected < pageRangeDisplayed / 2) {\r\n                leftSide  = selected;\r\n                rightSide = pageRangeDisplayed - leftSide;\r\n            }\r\n            \r\n            let index;\r\n            let page;\r\n            let breakView;\r\n            let createPage = (index) => this.getPageElement(index);\r\n            \r\n            for (index = 0; index < pageCount; index++) {\r\n                page = index+1;\r\n                \r\n                // \r\n                if (page <= marginPagesDisplayed) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if (page > pageCount - marginPagesDisplayed) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if ((index >= selected - leftSide) && (index <= selected + rightSide)) {\r\n                    items.push(createPage(index));\r\n                    continue;\r\n                }\r\n                \r\n                if (breakLabel && items[items.length - 1] != breakView) {\r\n                    breakView = (\r\n                        <Break\r\n                            key={index}\r\n                            label={breakLabel}\r\n                        />\r\n                    );\r\n                    items.push(breakView);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return items;\r\n    }\r\n    \r\n    render() {\r\n        const { selected } = this.state;\r\n        const { classes, pageCount, previousLabel, nextLabel, hideNumbers, className } = this.props;\r\n        return (\r\n            <ul className={`${classes.pager}${className ? ` ${className}` : ''}`}>\r\n                <li className={`${classes.btn} ${classes.prev}${selected == 0 ? ` ${classes.disabled}` : ''}`} tabIndex=\"0\" onClick={this.handlePrevPage}>\r\n                    <Icon iconName=\"arrowDown\" colors={['#adb4bb']} /> {previousLabel}\r\n                </li>\r\n                {!hideNumbers && this.pagination()}\r\n                <li className={`${classes.btn} ${classes.next}${selected == pageCount - 1 ? ` ${classes.disabled}` : ''}`} tabIndex=\"0\" onClick={this.handleNextPage}>\r\n                    {nextLabel} <Icon iconName=\"arrowDown\" colors={['#adb4bb']} />\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nPager.propTypes = {\r\n    classes: PropTypes.object,\r\n    className: PropTypes.string,\r\n    pageCount: PropTypes.number.isRequired,\r\n    pageRangeDisplayed: PropTypes.number.isRequired,\r\n    marginPagesDisplayed: PropTypes.number.isRequired,\r\n    previousLabel: PropTypes.node,\r\n    nextLabel: PropTypes.node,\r\n    onPageChange: PropTypes.func,\r\n    initialPage: PropTypes.number,\r\n    forcePage: PropTypes.number,\r\n    disableInitialCallback: PropTypes.bool,\r\n    hideNumbers: PropTypes.bool,\r\n    breakLabel: PropTypes.string\r\n};\r\n\r\nPager.defaultProps = {\r\n    pageCount: 10,\r\n    pageRangeDisplayed: 2,\r\n    marginPagesDisplayed: 3,\r\n    previousLabel: 'Previous',\r\n    nextLabel: 'Next',\r\n    breakLabel: '...',\r\n    disableInitialCallback: false,\r\n    hideNumbers: false\r\n};\r\n\r\nexport default Pager;","examples":[]},{"name":"RangeCounter","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"min":{"type":{"name":"number"},"required":false,"description":""},"max":{"type":{"name":"number"},"required":false,"description":""},"symbol":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"' - '","computed":false}},"total":{"type":{"name":"number"},"required":false,"description":""},"type":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"of":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'/'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass RangeCounter extends React.Component {\r\n    \r\n    numberWithCommas(num) {\r\n        return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n    \r\n    render() {\r\n        const { classes, min, max, symbol, total, type, of } = this.props;\r\n        return (\r\n            <div className={classes.cont}><span className={classes.num}>{this.numberWithCommas(min)}{symbol}{this.numberWithCommas(max)}</span> {of} {this.numberWithCommas(total)} {type}</div>\r\n        );\r\n    }\r\n}\r\n\r\nRangeCounter.propTypes = {\r\n    classes: PropTypes.object,\r\n    min: PropTypes.number,\r\n    max: PropTypes.number,\r\n    symbol: PropTypes.string,\r\n    total: PropTypes.number,\r\n    type: PropTypes.string,\r\n    of: PropTypes.string\r\n};\r\n\r\nRangeCounter.defaultProps = {\r\n    symbol: ' - ',\r\n    type: '',\r\n    of: '/'\r\n};\r\n\r\nexport default RangeCounter;","examples":[]},{"name":"Row","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Row = ({ classes, children, className, id, style }) => (\r\n    <div className={`${classes.row}${className ? ` ${className}` : ''}`} style={style} id={id}>{children}</div>\r\n);\r\n\r\nRow.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    className: PropTypes.string,\r\n    id: PropTypes.string,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default Row;","examples":[]},{"name":"SightLogo","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SightLogo = ({ classes, style }) => (\r\n    <div className={classes.container} style={style}>\r\n        <i className={classes.logo} />\r\n    </div>\r\n);\r\n\r\nSightLogo.propTypes = {\r\n    classes: PropTypes.object,\r\n    style: PropTypes.object\r\n};\r\n\r\nexport default SightLogo;","examples":[]},{"name":"SlideDown","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"title":{"type":{"name":"string"},"required":false,"description":""},"expanded":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"active":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\n\r\nimport Title from '../Title';\r\nimport Icon from '../Icon';\r\nimport Flexbox from '../Flexbox';\r\n\r\nimport colors from '../subatomic/colors';\r\n\r\nclass SlideDown extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: this.props.expanded,\r\n            toggled: this.props.expanded\r\n        };\r\n        this.toggleContent = this.toggleContent.bind(this);\r\n    }\r\n\r\n    toggleContent() {\r\n        if (!this.state.expanded) {\r\n            this.setState({\r\n                expanded: true\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    toggled: true\r\n                });\r\n            }, 0);\r\n        } else {\r\n            this.setState({\r\n                toggled: false\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    expanded: false\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { expanded, toggled } = this.state;\r\n        const { classes, title, children, active } = this.props;\r\n        return (\r\n            <div>\r\n                <div className={classes.button} onClick={this.toggleContent}>\r\n                    <Flexbox display=\"flex\" justifyContent=\"between\" alignItems=\"center\">\r\n                        <Title h={4} className={active ? classes.dot : ''}>{title}</Title>\r\n                        <Icon iconName=\"arrowDown\" colors={[colors.grey6]} style={{transform:toggled ? 'rotate(180deg)' : ''}} />\r\n                    </Flexbox>\r\n                </div>\r\n                {expanded && (\r\n                    <div className={`${classes.content} ${toggled ? classes.show : classes.hide}`}>\r\n                        {children}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nSlideDown.defaultProps = {\r\n    expanded: false\r\n};\r\n\r\nSlideDown.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    title: PropTypes.string,\r\n    expanded: PropTypes.bool,\r\n    active: PropTypes.bool\r\n};\r\n\r\nexport default SlideDown;","examples":[]},{"name":"SubHeader","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"theme":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"blue\"","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"left":{"type":{"name":"node"},"required":false,"description":""},"right":{"type":{"name":"node"},"required":false,"description":""},"center":{"type":{"name":"node"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\n\r\nimport Flexbox from '../Flexbox';\r\n\r\nclass SubHeader extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, theme, fixed, left, right, center } = this.props;\r\n        return (\r\n            <div className={classes.wrapper}>\r\n                <div className={`${classes.subHeader}${theme ? ` ${classes[theme]}` : classes.blue}${fixed ? ` ${classes.fixed}` : ''}`}>\r\n                    {left && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.left}>{left}</Flexbox>}\r\n                    {right && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.right}>{right}</Flexbox>}\r\n                    {center && <Flexbox display=\"flex\" alignItems=\"center\" className={classes.center}>{center}</Flexbox>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSubHeader.defaultProps = {\r\n    fixed: false,\r\n    theme: \"blue\"\r\n};\r\n\r\nSubHeader.propTypes = {\r\n    classes: PropTypes.object,\r\n    theme: PropTypes.string,\r\n    fixed: PropTypes.bool,\r\n    left: PropTypes.node,\r\n    right: PropTypes.node,\r\n    center: PropTypes.node\r\n};\r\n\r\nexport default SubHeader;","examples":[]},{"name":"SwitchGroup","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"buttons":{"type":{"name":"array"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""},"selected":{"type":{"name":"number"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport injectSheet from 'react-jss';\r\n\r\nimport Flexbox from '../Flexbox';\r\n\r\nclass SwitchGroup extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: props.selected ? props.selected : 0\r\n        };\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n    \r\n    onClick(button, index) {\r\n        const { onClick } = this.props;\r\n        this.setState({\r\n            selected: index\r\n        });\r\n        if (onClick)\r\n            onClick(button, index);\r\n    }\r\n    \r\n    render() {\r\n        const { selected } = this.state;\r\n        const { classes, buttons } = this.props;\r\n        return (\r\n            <Flexbox display=\"flex\">\r\n                {buttons.map((button, index) => {\r\n                    return (\r\n                        <button\r\n                            key={button.text}\r\n                            className={`${classes.button}${selected == index ? ` ${classes.active}` : ''}`}\r\n                            onClick={() => {this.onClick(button, index);}}>\r\n                            {button.text}{button.sec ? <span className={classes.sec}>{button.sec}</span> : ''}\r\n                        </button>\r\n                    );\r\n                })}\r\n            </Flexbox>\r\n        );\r\n    }\r\n}\r\n\r\nSwitchGroup.propTypes = {\r\n    classes: PropTypes.object,\r\n    buttons: PropTypes.array,\r\n    onClick: PropTypes.func,\r\n    selected: PropTypes.number\r\n};\r\n\r\nexport default SwitchGroup;","examples":[]},{"name":"Title","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"h":{"type":{"name":"number"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"style":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Title extends React.Component {\r\n    \r\n    render() {\r\n        const { classes, children, h, id, className, style } = this.props;\r\n        let Heading;\r\n        if (h && h<=6 && h>=1)\r\n            Heading = `h${h}`;\r\n        else\r\n            Heading = 'h1';\r\n        return (\r\n            <Heading id={id} className={`${classes.title} ${classes[Heading]}${className ? ` ${className}` : ''}`} style={style}>\r\n                {children}\r\n            </Heading>\r\n        );\r\n    }\r\n}\r\n\r\nTitle.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    h: PropTypes.number,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n};\r\n\r\nexport default Title;","examples":[]},{"name":"TourTip","description":"","props":{"classes":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"direction":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"left\"","computed":false}},"align":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"center\"","computed":false}},"target":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport $ from 'jquery';\r\n\r\nclass TourTip extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: {}\r\n        };\r\n        this.attachToTarget = this.attachToTarget.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const setPosition = () => {\r\n            this.setState({\r\n                position: this.attachToTarget()\r\n            });\r\n        };\r\n        $(document).ready(setPosition);\r\n        window.addEventListener(\"resize\", setPosition);\r\n    }\r\n    \r\n    attachToTarget() {\r\n        const { target, direction, align } = this.props;\r\n        const item = document.getElementById(target);\r\n        const itemRect = item.getBoundingClientRect();\r\n        const offsetLeft = item.offsetLeft;\r\n        const offsetTop = item.offsetTop;\r\n        const tip = ReactDOM.findDOMNode(this);\r\n        const tipRect = tip.getBoundingClientRect();\r\n        let position = {};\r\n        if (direction == \"left\") {\r\n            position.left = offsetLeft - tipRect.width - 5;\r\n            if (align == \"top\")\r\n                position.top = offsetTop;\r\n            else if (align == \"bottom\")\r\n                position.top = offsetTop + itemRect.height - tipRect.height;\r\n            else\r\n                position.top = offsetTop + (itemRect.height/2) - (tipRect.height/2);\r\n        } else if (direction == \"right\") {\r\n            position.left = offsetLeft + itemRect.width + 5;\r\n            if (align == \"top\")\r\n                position.top = offsetTop;\r\n            else if (align == \"bottom\")\r\n                position.top = offsetTop + itemRect.height - tipRect.height;\r\n            else\r\n                position.top = offsetTop + (itemRect.height/2) - (tipRect.height/2);\r\n        } else if (direction == \"up\") {\r\n            if (align == \"left\")\r\n                position.left = offsetLeft;\r\n            else if (align == \"right\")\r\n                position.left = offsetLeft + itemRect.width -tipRect.width;\r\n            else\r\n                position.left = offsetLeft + (itemRect.width/2) - (tipRect.width/2);\r\n            position.top = offsetTop - tipRect.height - 5;\r\n        } else if (direction == \"down\") {\r\n            if (align == \"left\")\r\n                position.left = offsetLeft;\r\n            else if (align == \"right\")\r\n                position.left = offsetLeft + itemRect.width -tipRect.width;\r\n            else\r\n                position.left = offsetLeft + (itemRect.width/2) - (tipRect.width/2);\r\n            position.top = offsetTop + itemRect.height + 5;\r\n        }\r\n        return position;\r\n    }\r\n    \r\n    render() {\r\n        const { position } = this.state;\r\n        const { classes, children, direction, align } = this.props;\r\n        return (\r\n            <div ref={ref => { this.self = ref; }} className={`${classes.tip} ${classes[direction]}`} style={position}>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nTourTip.defaultProps = {\r\n    direction: \"left\",\r\n    align: \"center\"\r\n};\r\n\r\nTourTip.propTypes = {\r\n    classes: PropTypes.object,\r\n    children: PropTypes.node,\r\n    direction: PropTypes.string,\r\n    align: PropTypes.string,\r\n    target: PropTypes.string\r\n};\r\n\r\nexport default TourTip;","examples":[]},{"name":"Visible","description":"","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"xs":{"type":{"name":"bool"},"required":false,"description":""},"sm":{"type":{"name":"bool"},"required":false,"description":""},"md":{"type":{"name":"bool"},"required":false,"description":""},"lg":{"type":{"name":"bool"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport grid from '../subatomic/grid';\r\n\r\nclass Visible extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 0\r\n        };\r\n        this.getDimensions = this.getDimensions.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getDimensions();\r\n        window.addEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this.getDimensions();\r\n        window.removeEventListener(\"resize\", this.getDimensions);\r\n    }\r\n    \r\n    getDimensions() {\r\n        const width = window.innerWidth;\r\n        this.setState({\r\n            width\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        const { width } = this.state;\r\n        const { children, xs, sm, md, lg} = this.props;\r\n        if (\r\n            ((width >= grid.xs && width < grid.sm) && xs) ||\r\n            ((width >= grid.sm && width < grid.md) && sm) ||\r\n            ((width >= grid.md && width < grid.lg) && md) ||\r\n            ((width >= grid.lg) && lg)\r\n        ) {\r\n            return <span>{children}</span>;\r\n        } else {\r\n            return <span />;\r\n        }\r\n    }\r\n}\r\n\r\nVisible.propTypes = {\r\n    children: PropTypes.node,\r\n    xs: PropTypes.bool,\r\n    sm: PropTypes.bool,\r\n    md: PropTypes.bool,\r\n    lg: PropTypes.bool\r\n};\r\n\r\nexport default Visible;","examples":[]}]